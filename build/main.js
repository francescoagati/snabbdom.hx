// Generated by Haxe 3.3.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var snabbdom_Main = function() { };
snabbdom_Main.__name__ = true;
snabbdom_Main.click = function(e) {
	console.log("click");
};
snabbdom_Main.over = function(e) {
	console.log("over");
};
snabbdom_Main.out = function(e) {
	console.log("out");
};
snabbdom_Main.main = function() {
	var txt = "testo";
	var vnode_sel = "div";
	var vnode_data = { attrs : { id : "pippa", ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null};
	var vnode_children = [{ sel : "ul", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : [{ sel : "li", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, text : "1"},{ sel : "li", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, text : "2"},{ sel : "li", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, text : "3"},{ sel : "li", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, text : "4"},{ sel : "li", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, text : "5"},{ sel : "li", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : [{ sel : "span", data : { attrs : { ___cache : "0", ___cache_sting : ""}, ___cache : 0, skip_styles : true, skip_attributes : false, props : null, classes : null, style : null, hook : null, on : { 'click' : snabbdom_Main.click}}, children : null, elm : null, text : txt}], elm : null, text : null}], elm : null, text : null}];
	var vnode_elm = null;
	var vnode_text = null;
	var last_node = null;
	var last_node2 = null;
	var cache = 0;
	cache = cache | 2;
	cache = cache | 4;
	var init = null;
	var timer = new haxe_Timer(1000);
	timer.run = function() {
		var rnd = Math.random();
		var color = thx_Arrays.shuffle(["red","yellow","green","black","white","grey"])[0];
		var bg = thx_Arrays.shuffle(["red","yellow","green","black","white","grey"])[0];
		var max = 50;
		if(max <= 3) {
			max = 4;
		}
		if(init == null) {
			init = 0;
		} else {
			init = 3;
		}
		var _g = [];
		var _g1_min = init;
		var _g1_max = max;
		while(_g1_min < _g1_max) {
			var x = _g1_min++;
			var key = "key - " + x;
			var random = Math.random() * 5000;
			_g.push({ sel : "li", data : { attrs : { ___cache : "4", cippalippa : "ciaone", ___cache_sting : "cacheStyle", key : key}, ___cache : 4, style : { border : "10px solid green"}, key : key, skip_styles : true, skip_attributes : false, props : null, classes : null, hook : null}, children : [{ sel : "span", data : { attrs : { ___cache : "6", ___cache_sting : "cacheStyle cacheAll"}, ___cache : 6, style : { color : "white"}, skip_styles : true, skip_attributes : true, props : null, classes : null, hook : null}, children : null, elm : null, text : random}], elm : null, text : null});
		}
		var list = _g;
		var vnode2 = { sel : "div", data : { attrs : { id : "pippa", ___cache : "4", ___cache_sting : "cacheStyle"}, ___cache : 4, style : { color : "black"}, skip_styles : true, skip_attributes : false, props : null, classes : null, hook : null, on : { 'click' : snabbdom_Main.click, 'mouseout' : snabbdom_Main.out, 'mouseover' : snabbdom_Main.over}}, children : [{ sel : "span", data : { attrs : { ___cache : "2", ___cache_sting : "cacheAll"}, ___cache : 2, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, text : max},{ sel : "ul", data : { attrs : { ___cache : "0", ___cache_sting : ""}, ___cache : 0, style : { fontSize : "30px", color : "white", backgroundColor : bg}, skip_styles : false, skip_attributes : false, props : null, classes : null, hook : null}, children : list, elm : null, text : null}], elm : null, text : null};
		if(last_node == null) {
			snabbdom_engine_dom_PatchDom.patchDom(window.document.getElementById("container"),vnode2);
		} else {
			snabbdom_engine_dom_PatchDom.patch(last_node,vnode2);
		}
		last_node = vnode2;
	};
};
var snabbdom_engine_dom_DomPool = function() { };
snabbdom_engine_dom_DomPool.__name__ = true;
var snabbdom_engine_dom_PatchDom = function() { };
snabbdom_engine_dom_PatchDom.__name__ = true;
snabbdom_engine_dom_PatchDom.createElm = function(vnode,insertedVnodeQueue) {
	var i;
	var data = vnode.data;
	if(data != undefined) {
		var tmp;
		i = data.hook;
		if(i != undefined) {
			i = i.init;
			tmp = i != undefined;
		} else {
			tmp = false;
		}
		if(tmp) {
			i(vnode);
		}
		i = data.vnode;
		if(i != undefined) {
			vnode = i;
		}
	}
	var elm;
	var children = vnode.children;
	var sel = vnode.sel;
	if(sel != undefined) {
		var tag = sel;
		var tmp1;
		var tmp2;
		if(data != undefined) {
			i = data.ns;
			tmp2 = i != undefined;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = window.document.createElementNS(i,tag);
		} else {
			switch(tag) {
			case "div":
				var nodes = snabbdom_engine_dom_DomPool.nodes_div;
				if(nodes.length == 0) {
					nodes.push(window.document.createElement("div"));
				}
				tmp1 = nodes.shift();
				break;
			case "li":
				var nodes1 = snabbdom_engine_dom_DomPool.nodes_li;
				if(nodes1.length == 0) {
					nodes1.push(window.document.createElement("li"));
				}
				tmp1 = nodes1.shift();
				break;
			case "span":
				var nodes2 = snabbdom_engine_dom_DomPool.nodes_span;
				if(nodes2.length == 0) {
					nodes2.push(window.document.createElement("span"));
				}
				tmp1 = nodes2.shift();
				break;
			default:
				tmp1 = window.document.createElement(tag);
			}
		}
		elm = vnode.elm = tmp1;
		if(Array.isArray(children)) {
			i = 0;
			while(i < children.length) {
				var new_node = snabbdom_engine_dom_PatchDom.createElm(children[i],insertedVnodeQueue);
				window.requestAnimationFrame((function(element,this1) {
					return function(i1) {
						this1[0].appendChild(element[0]);
					};
				})([new_node],[elm]));
				++i;
			}
		} else if(typeof vnode.text == "string" || typeof vnode.text == "number") {
			var this2 = elm;
			var element1 = window.document.createTextNode(vnode.text);
			window.requestAnimationFrame(function(i2) {
				this2.appendChild(element1);
			});
		}
		snabbdom_engine_dom_plugins_Hooks.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode);
		if(vnode.data != null) {
			i = vnode.data.hook;
			if(i != undefined) {
				if(i.create) {
					i.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode);
				}
				if(i.insert) {
					insertedVnodeQueue.push(vnode);
				}
			}
		}
	} else {
		var this3 = window.document.createTextNode(vnode.text);
		vnode.elm = this3;
	}
	return vnode.elm;
};
snabbdom_engine_dom_PatchDom.invokeDestroyHook = function(vnode) {
	var i = vnode.data;
	var j;
	if(i != undefined) {
		var tmp;
		i = i.hook;
		if(i != undefined) {
			i = i.destroy;
			tmp = i != undefined;
		} else {
			tmp = false;
		}
		if(tmp) {
			i(vnode);
		}
		snabbdom_engine_dom_plugins_Hooks.destroy(vnode);
		i = vnode.children;
		if(i != undefined) {
			j = 0;
			while(j < vnode.children.length) {
				snabbdom_engine_dom_PatchDom.invokeDestroyHook(vnode.children[j]);
				++j;
			}
		}
	}
};
snabbdom_engine_dom_PatchDom.updateChildren = function(parentElm,oldCh,newCh,insertedVnodeQueue) {
	var oldStartIdx = 0;
	var newStartIdx = 0;
	var oldEndIdx = oldCh.length - 1;
	var oldStartVnode = oldCh[0];
	var oldEndVnode = oldCh[oldEndIdx];
	var newEndIdx = newCh.length - 1;
	var newStartVnode = newCh[0];
	var newEndVnode = newCh[newEndIdx];
	var oldKeyToIdx = null;
	var idxInOld = null;
	var elmToMove = null;
	var before = null;
	while(oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) if(oldStartVnode == undefined) {
		oldStartVnode = oldCh[++oldStartIdx];
	} else if(oldEndVnode == undefined) {
		oldEndVnode = oldCh[--oldEndIdx];
	} else if(oldStartVnode.data.key == newStartVnode.data.key && oldStartVnode.sel == newStartVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldStartVnode,newStartVnode,insertedVnodeQueue);
		oldStartVnode = oldCh[++oldStartIdx];
		newStartVnode = newCh[++newStartIdx];
	} else if(oldEndVnode.data.key == newEndVnode.data.key && oldEndVnode.sel == newEndVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldEndVnode,newEndVnode,insertedVnodeQueue);
		oldEndVnode = oldCh[--oldEndIdx];
		newEndVnode = newCh[--newEndIdx];
	} else if(oldStartVnode.data.key == newEndVnode.data.key && oldStartVnode.sel == newEndVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldStartVnode,newEndVnode,insertedVnodeQueue);
		var this1 = [parentElm];
		var new_node = [oldStartVnode.elm];
		var this2 = oldEndVnode.elm.nextSibling;
		window.requestAnimationFrame((function(ref_node,new_node1,this3) {
			return function(i) {
				this3[0].insertBefore(new_node1[0],ref_node[0]);
			};
		})([this2],new_node,this1));
		oldStartVnode = oldCh[++oldStartIdx];
		newEndVnode = newCh[--newEndIdx];
	} else if(oldEndVnode.data.key == newStartVnode.data.key && oldEndVnode.sel == newStartVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldEndVnode,newStartVnode,insertedVnodeQueue);
		window.requestAnimationFrame((function(ref_node1,new_node2,this4) {
			return function(i1) {
				this4[0].insertBefore(new_node2[0],ref_node1[0]);
			};
		})([oldStartVnode.elm],[oldEndVnode.elm],[parentElm]));
		oldEndVnode = oldCh[--oldEndIdx];
		newStartVnode = newCh[++newStartIdx];
	} else {
		if(oldKeyToIdx == undefined) {
			var i2;
			var map = { };
			var key;
			i2 = oldStartIdx;
			while(i2 <= oldEndIdx) {
				key = oldCh[i2].data.key;
				if(key != undefined) {
					map[key] = i2;
				}
				++i2;
			}
			oldKeyToIdx = map;
		}
		idxInOld = oldKeyToIdx[newStartVnode.key];
		if(idxInOld == undefined) {
			var vnode = newStartVnode;
			var i3;
			var data = vnode.data;
			if(data != undefined) {
				var tmp;
				i3 = data.hook;
				if(i3 != undefined) {
					i3 = i3.init;
					tmp = i3 != undefined;
				} else {
					tmp = false;
				}
				if(tmp) {
					i3(vnode);
				}
				i3 = data.vnode;
				if(i3 != undefined) {
					vnode = i3;
				}
			}
			var elm;
			var children = vnode.children;
			var sel = vnode.sel;
			if(sel != undefined) {
				var tag = sel;
				var tmp1;
				var tmp2;
				if(data != undefined) {
					i3 = data.ns;
					tmp2 = i3 != undefined;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = window.document.createElementNS(i3,tag);
				} else {
					switch(tag) {
					case "div":
						var nodes = snabbdom_engine_dom_DomPool.nodes_div;
						if(nodes.length == 0) {
							nodes.push(window.document.createElement("div"));
						}
						tmp1 = nodes.shift();
						break;
					case "li":
						var nodes1 = snabbdom_engine_dom_DomPool.nodes_li;
						if(nodes1.length == 0) {
							nodes1.push(window.document.createElement("li"));
						}
						tmp1 = nodes1.shift();
						break;
					case "span":
						var nodes2 = snabbdom_engine_dom_DomPool.nodes_span;
						if(nodes2.length == 0) {
							nodes2.push(window.document.createElement("span"));
						}
						tmp1 = nodes2.shift();
						break;
					default:
						tmp1 = window.document.createElement(tag);
					}
				}
				elm = vnode.elm = tmp1;
				if(Array.isArray(children)) {
					i3 = 0;
					while(i3 < children.length) {
						var new_node3 = snabbdom_engine_dom_PatchDom.createElm(children[i3],insertedVnodeQueue);
						window.requestAnimationFrame((function(element,this5) {
							return function(i4) {
								this5[0].appendChild(element[0]);
							};
						})([new_node3],[elm]));
						++i3;
					}
				} else if(typeof vnode.text == "string" || typeof vnode.text == "number") {
					var this6 = [elm];
					var element1 = [window.document.createTextNode(vnode.text)];
					window.requestAnimationFrame((function(element2,this7) {
						return function(i5) {
							this7[0].appendChild(element2[0]);
						};
					})(element1,this6));
				}
				snabbdom_engine_dom_plugins_Hooks.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode);
				if(vnode.data != null) {
					i3 = vnode.data.hook;
					if(i3 != undefined) {
						if(i3.create) {
							i3.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode);
						}
						if(i3.insert) {
							insertedVnodeQueue.push(vnode);
						}
					}
				}
			} else {
				var this8 = window.document.createTextNode(vnode.text);
				vnode.elm = this8;
			}
			var new_node4 = vnode.elm;
			window.requestAnimationFrame((function(ref_node2,new_node5,this9) {
				return function(i6) {
					this9[0].insertBefore(new_node5[0],ref_node2[0]);
				};
			})([oldStartVnode.elm],[new_node4],[parentElm]));
			newStartVnode = newCh[++newStartIdx];
		} else {
			elmToMove = oldCh[idxInOld];
			snabbdom_engine_dom_PatchDom.patchVnode(elmToMove,newStartVnode,insertedVnodeQueue);
			oldCh[idxInOld] = null;
			window.requestAnimationFrame((function(ref_node3,new_node6,this10) {
				return function(i7) {
					this10[0].insertBefore(new_node6[0],ref_node3[0]);
				};
			})([oldStartVnode.elm],[elmToMove.elm],[parentElm]));
			newStartVnode = newCh[++newStartIdx];
		}
	}
	if(oldStartIdx > oldEndIdx) {
		if(newCh[newEndIdx + 1] == undefined) {
			before = null;
		} else {
			before = newCh[newEndIdx + 1].elm;
		}
		var startIdx = newStartIdx;
		var i8;
		var new_node7;
		i8 = 0;
		while(startIdx <= newEndIdx) {
			var vnode1 = newCh[startIdx];
			var i9;
			var data1 = vnode1.data;
			if(data1 != undefined) {
				var tmp3;
				i9 = data1.hook;
				if(i9 != undefined) {
					i9 = i9.init;
					tmp3 = i9 != undefined;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					i9(vnode1);
				}
				i9 = data1.vnode;
				if(i9 != undefined) {
					vnode1 = i9;
				}
			}
			var elm1;
			var children1 = vnode1.children;
			var sel1 = vnode1.sel;
			if(sel1 != undefined) {
				var tag1 = sel1;
				var tmp4;
				var tmp5;
				if(data1 != undefined) {
					i9 = data1.ns;
					tmp5 = i9 != undefined;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = window.document.createElementNS(i9,tag1);
				} else {
					switch(tag1) {
					case "div":
						var nodes3 = snabbdom_engine_dom_DomPool.nodes_div;
						if(nodes3.length == 0) {
							nodes3.push(window.document.createElement("div"));
						}
						tmp4 = nodes3.shift();
						break;
					case "li":
						var nodes4 = snabbdom_engine_dom_DomPool.nodes_li;
						if(nodes4.length == 0) {
							nodes4.push(window.document.createElement("li"));
						}
						tmp4 = nodes4.shift();
						break;
					case "span":
						var nodes5 = snabbdom_engine_dom_DomPool.nodes_span;
						if(nodes5.length == 0) {
							nodes5.push(window.document.createElement("span"));
						}
						tmp4 = nodes5.shift();
						break;
					default:
						tmp4 = window.document.createElement(tag1);
					}
				}
				elm1 = vnode1.elm = tmp4;
				if(Array.isArray(children1)) {
					i9 = 0;
					while(i9 < children1.length) {
						var new_node8 = snabbdom_engine_dom_PatchDom.createElm(children1[i9],insertedVnodeQueue);
						window.requestAnimationFrame((function(element3,this11) {
							return function(i10) {
								this11[0].appendChild(element3[0]);
							};
						})([new_node8],[elm1]));
						++i9;
					}
				} else if(typeof vnode1.text == "string" || typeof vnode1.text == "number") {
					var this12 = [elm1];
					var element4 = [window.document.createTextNode(vnode1.text)];
					window.requestAnimationFrame((function(element5,this13) {
						return function(i11) {
							this13[0].appendChild(element5[0]);
						};
					})(element4,this12));
				}
				snabbdom_engine_dom_plugins_Hooks.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
				if(vnode1.data != null) {
					i9 = vnode1.data.hook;
					if(i9 != undefined) {
						if(i9.create) {
							i9.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
						}
						if(i9.insert) {
							insertedVnodeQueue.push(vnode1);
						}
					}
				}
			} else {
				var this14 = window.document.createTextNode(vnode1.text);
				vnode1.elm = this14;
			}
			new_node7 = vnode1.elm;
			parentElm.insertBefore(new_node7,before);
			++startIdx;
		}
	} else if(newStartIdx > newEndIdx) {
		var startIdx1 = oldStartIdx;
		var y;
		y = 0;
		while(startIdx1 <= oldEndIdx) {
			var i12;
			var listeners;
			var rm = null;
			var ch = oldCh[startIdx1];
			if(ch != undefined) {
				if(ch.sel != undefined) {
					var vnode2 = ch;
					var i13 = vnode2.data;
					var j;
					if(i13 != undefined) {
						var tmp6;
						i13 = i13.hook;
						if(i13 != undefined) {
							i13 = i13.destroy;
							tmp6 = i13 != undefined;
						} else {
							tmp6 = false;
						}
						if(tmp6) {
							i13(vnode2);
						}
						snabbdom_engine_dom_plugins_Hooks.destroy(vnode2);
						i13 = vnode2.children;
						if(i13 != undefined) {
							j = 0;
							while(j < vnode2.children.length) {
								snabbdom_engine_dom_PatchDom.invokeDestroyHook(vnode2.children[j]);
								++j;
							}
						}
					}
					snabbdom_engine_dom_plugins_Hooks.remove(ch,rm);
					var tmp7;
					var tmp8;
					i12 = ch.data;
					if(i12 != undefined) {
						i12 = i12.hook;
						tmp8 = i12 != undefined;
					} else {
						tmp8 = false;
					}
					if(tmp8) {
						i12 = i12.remove;
						tmp7 = i12 != undefined;
					} else {
						tmp7 = false;
					}
					if(tmp7) {
						i12(ch,rm);
					} else {
						console.log("remove");
						if(rm != null) {
							rm();
						}
						var this15 = [parentElm];
						var element6 = [ch.elm];
						console.log("remove-child");
						window.requestAnimationFrame((function(element7,this16) {
							return function(i14) {
								this16[0].removeChild(element7[0]);
								var element8 = element7[0];
								var tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e012 = (function() {
									return function(__return) {
										var cb = (function() {
											return function() {
												element8.textContent = "";
												element8.___cache = null;
												var _g = element8.nodeName;
												switch(_g) {
												case "DIV":
													snabbdom_engine_dom_DomPool.nodes_div.unshift(element8);
													__return();
													break;
												case "LI":
													snabbdom_engine_dom_DomPool.nodes_li.unshift(element8);
													__return();
													break;
												case "SPAN":
													snabbdom_engine_dom_DomPool.nodes_span.unshift(element8);
													__return();
													break;
												default:
													__return();
												}
											};
										})();
										window.setTimeout((function() {
											return function() {
												cb();
											};
										})(),0);
									};
								})();
								var fn = tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e012;
								fn(thx_Functions.noop);
							};
						})(element6,this15));
					}
				} else {
					var this17 = [parentElm];
					var element9 = [ch.elm];
					console.log("remove-child");
					window.requestAnimationFrame((function(element10,this18) {
						return function(i15) {
							this18[0].removeChild(element10[0]);
							var element11 = element10[0];
							var tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e0121 = (function() {
								return function(__return1) {
									var cb1 = (function() {
										return function() {
											element11.textContent = "";
											element11.___cache = null;
											var _g1 = element11.nodeName;
											switch(_g1) {
											case "DIV":
												snabbdom_engine_dom_DomPool.nodes_div.unshift(element11);
												__return1();
												break;
											case "LI":
												snabbdom_engine_dom_DomPool.nodes_li.unshift(element11);
												__return1();
												break;
											case "SPAN":
												snabbdom_engine_dom_DomPool.nodes_span.unshift(element11);
												__return1();
												break;
											default:
												__return1();
											}
										};
									})();
									window.setTimeout((function() {
										return function() {
											cb1();
										};
									})(),0);
								};
							})();
							var fn1 = tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e0121;
							fn1(thx_Functions.noop);
						};
					})(element9,this17));
				}
			}
			++startIdx1;
		}
	}
};
snabbdom_engine_dom_PatchDom.patchVnode = function(oldVnode,vnode,insertedVnodeQueue) {
	var i;
	var hook;
	var tmp;
	var tmp1;
	i = vnode.data;
	if(i != undefined) {
		hook = i.hook;
		tmp1 = hook != undefined;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		i = hook.prepatch;
		tmp = i != undefined;
	} else {
		tmp = false;
	}
	if(tmp) {
		i(oldVnode,vnode);
	}
	var tmp2;
	i = oldVnode.data;
	if(i != undefined) {
		i = i.vnode;
		tmp2 = i != undefined;
	} else {
		tmp2 = false;
	}
	if(tmp2) {
		oldVnode = i;
	}
	var tmp3;
	i = vnode.data;
	if(i != undefined) {
		i = i.vnode;
		tmp3 = i != undefined;
	} else {
		tmp3 = false;
	}
	if(tmp3) {
		vnode = i;
	}
	var elm = vnode.elm = oldVnode.elm;
	var oldCh = oldVnode.children;
	var ch = vnode.children;
	if(oldVnode == vnode) {
		return;
	}
	if(vnode.data != undefined) {
		snabbdom_engine_dom_plugins_Hooks.update(oldVnode,vnode);
		i = vnode.data.hook;
		var tmp4;
		if(i != undefined) {
			i = i.update;
			tmp4 = i != undefined;
		} else {
			tmp4 = false;
		}
		if(tmp4) {
			i(oldVnode,vnode);
		}
	}
	if(vnode.text == undefined) {
		if(oldCh != undefined && ch != undefined) {
			if(oldCh != ch) {
				snabbdom_engine_dom_PatchDom.updateChildren(elm,oldCh,ch,insertedVnodeQueue);
			}
		} else if(ch != undefined) {
			var startIdx = 0;
			var endIdx = ch.length - 1;
			var i1;
			var new_node;
			i1 = 0;
			while(startIdx <= endIdx) {
				var vnode1 = ch[startIdx];
				var i2;
				var data = vnode1.data;
				if(data != undefined) {
					var tmp5;
					i2 = data.hook;
					if(i2 != undefined) {
						i2 = i2.init;
						tmp5 = i2 != undefined;
					} else {
						tmp5 = false;
					}
					if(tmp5) {
						i2(vnode1);
					}
					i2 = data.vnode;
					if(i2 != undefined) {
						vnode1 = i2;
					}
				}
				var elm1;
				var children = vnode1.children;
				var sel = vnode1.sel;
				if(sel != undefined) {
					var tag = sel;
					var tmp6;
					var tmp7;
					if(data != undefined) {
						i2 = data.ns;
						tmp7 = i2 != undefined;
					} else {
						tmp7 = false;
					}
					if(tmp7) {
						tmp6 = window.document.createElementNS(i2,tag);
					} else {
						switch(tag) {
						case "div":
							var nodes = snabbdom_engine_dom_DomPool.nodes_div;
							if(nodes.length == 0) {
								nodes.push(window.document.createElement("div"));
							}
							tmp6 = nodes.shift();
							break;
						case "li":
							var nodes1 = snabbdom_engine_dom_DomPool.nodes_li;
							if(nodes1.length == 0) {
								nodes1.push(window.document.createElement("li"));
							}
							tmp6 = nodes1.shift();
							break;
						case "span":
							var nodes2 = snabbdom_engine_dom_DomPool.nodes_span;
							if(nodes2.length == 0) {
								nodes2.push(window.document.createElement("span"));
							}
							tmp6 = nodes2.shift();
							break;
						default:
							tmp6 = window.document.createElement(tag);
						}
					}
					elm1 = vnode1.elm = tmp6;
					if(Array.isArray(children)) {
						i2 = 0;
						while(i2 < children.length) {
							var new_node1 = snabbdom_engine_dom_PatchDom.createElm(children[i2],insertedVnodeQueue);
							window.requestAnimationFrame((function(element,this1) {
								return function(i3) {
									this1[0].appendChild(element[0]);
								};
							})([new_node1],[elm1]));
							++i2;
						}
					} else if(typeof vnode1.text == "string" || typeof vnode1.text == "number") {
						var this2 = [elm1];
						var element1 = [window.document.createTextNode(vnode1.text)];
						window.requestAnimationFrame((function(element2,this3) {
							return function(i4) {
								this3[0].appendChild(element2[0]);
							};
						})(element1,this2));
					}
					snabbdom_engine_dom_plugins_Hooks.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
					if(vnode1.data != null) {
						i2 = vnode1.data.hook;
						if(i2 != undefined) {
							if(i2.create) {
								i2.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
							}
							if(i2.insert) {
								insertedVnodeQueue.push(vnode1);
							}
						}
					}
				} else {
					var this4 = window.document.createTextNode(vnode1.text);
					vnode1.elm = this4;
				}
				new_node = vnode1.elm;
				elm.insertBefore(new_node,null);
				++startIdx;
			}
		} else if(oldCh != undefined) {
			var startIdx1 = 0;
			var endIdx1 = oldCh.length - 1;
			var y;
			y = 0;
			while(startIdx1 <= endIdx1) {
				var i5;
				var listeners;
				var rm = null;
				var ch1 = oldCh[startIdx1];
				if(ch1 != undefined) {
					if(ch1.sel != undefined) {
						var vnode2 = ch1;
						var i6 = vnode2.data;
						var j;
						if(i6 != undefined) {
							var tmp8;
							i6 = i6.hook;
							if(i6 != undefined) {
								i6 = i6.destroy;
								tmp8 = i6 != undefined;
							} else {
								tmp8 = false;
							}
							if(tmp8) {
								i6(vnode2);
							}
							snabbdom_engine_dom_plugins_Hooks.destroy(vnode2);
							i6 = vnode2.children;
							if(i6 != undefined) {
								j = 0;
								while(j < vnode2.children.length) {
									snabbdom_engine_dom_PatchDom.invokeDestroyHook(vnode2.children[j]);
									++j;
								}
							}
						}
						snabbdom_engine_dom_plugins_Hooks.remove(ch1,rm);
						var tmp9;
						var tmp10;
						i5 = ch1.data;
						if(i5 != undefined) {
							i5 = i5.hook;
							tmp10 = i5 != undefined;
						} else {
							tmp10 = false;
						}
						if(tmp10) {
							i5 = i5.remove;
							tmp9 = i5 != undefined;
						} else {
							tmp9 = false;
						}
						if(tmp9) {
							i5(ch1,rm);
						} else {
							console.log("remove");
							if(rm != null) {
								rm();
							}
							var this5 = [elm];
							var element3 = [ch1.elm];
							console.log("remove-child");
							window.requestAnimationFrame((function(element4,this6) {
								return function(i7) {
									this6[0].removeChild(element4[0]);
									var element5 = element4[0];
									var tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e012 = (function() {
										return function(__return) {
											var cb = (function() {
												return function() {
													element5.textContent = "";
													element5.___cache = null;
													var _g = element5.nodeName;
													switch(_g) {
													case "DIV":
														snabbdom_engine_dom_DomPool.nodes_div.unshift(element5);
														__return();
														break;
													case "LI":
														snabbdom_engine_dom_DomPool.nodes_li.unshift(element5);
														__return();
														break;
													case "SPAN":
														snabbdom_engine_dom_DomPool.nodes_span.unshift(element5);
														__return();
														break;
													default:
														__return();
													}
												};
											})();
											window.setTimeout((function() {
												return function() {
													cb();
												};
											})(),0);
										};
									})();
									var fn = tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e012;
									fn(thx_Functions.noop);
								};
							})(element3,this5));
						}
					} else {
						var this7 = [elm];
						var element6 = [ch1.elm];
						console.log("remove-child");
						window.requestAnimationFrame((function(element7,this8) {
							return function(i8) {
								this8[0].removeChild(element7[0]);
								var element8 = element7[0];
								var tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e0121 = (function() {
									return function(__return1) {
										var cb1 = (function() {
											return function() {
												element8.textContent = "";
												element8.___cache = null;
												var _g1 = element8.nodeName;
												switch(_g1) {
												case "DIV":
													snabbdom_engine_dom_DomPool.nodes_div.unshift(element8);
													__return1();
													break;
												case "LI":
													snabbdom_engine_dom_DomPool.nodes_li.unshift(element8);
													__return1();
													break;
												case "SPAN":
													snabbdom_engine_dom_DomPool.nodes_span.unshift(element8);
													__return1();
													break;
												default:
													__return1();
												}
											};
										})();
										window.setTimeout((function() {
											return function() {
												cb1();
											};
										})(),0);
									};
								})();
								var fn1 = tmp_471EB32D_7F78_4029_869A_A558224BD03A_1471088795e0121;
								fn1(thx_Functions.noop);
							};
						})(element6,this7));
					}
				}
				++startIdx1;
			}
		}
	} else if(oldVnode.text != vnode.text) {
		var this9 = elm;
		var value = vnode.text;
		window.requestAnimationFrame(function(i9) {
			this9.textContent = value;
		});
	}
	var tmp11;
	if(hook != undefined) {
		i = hook.postpatch;
		tmp11 = i != undefined;
	} else {
		tmp11 = false;
	}
	if(tmp11) {
		i(oldVnode,vnode);
	}
};
snabbdom_engine_dom_PatchDom.patchDom = function(oldVnode,vnode) {
	var i = 0;
	var insertedVnodeQueue = [];
	var this1 = oldVnode.parentElement;
	if(this1 != null) {
		var vnode1 = vnode;
		var i1;
		var data = vnode1.data;
		if(data != undefined) {
			var tmp;
			i1 = data.hook;
			if(i1 != undefined) {
				i1 = i1.init;
				tmp = i1 != undefined;
			} else {
				tmp = false;
			}
			if(tmp) {
				i1(vnode1);
			}
			i1 = data.vnode;
			if(i1 != undefined) {
				vnode1 = i1;
			}
		}
		var elm;
		var children = vnode1.children;
		var sel = vnode1.sel;
		if(sel != undefined) {
			var tag = sel;
			var tmp1;
			var tmp2;
			if(data != undefined) {
				i1 = data.ns;
				tmp2 = i1 != undefined;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = window.document.createElementNS(i1,tag);
			} else {
				switch(tag) {
				case "div":
					var nodes = snabbdom_engine_dom_DomPool.nodes_div;
					if(nodes.length == 0) {
						nodes.push(window.document.createElement("div"));
					}
					tmp1 = nodes.shift();
					break;
				case "li":
					var nodes1 = snabbdom_engine_dom_DomPool.nodes_li;
					if(nodes1.length == 0) {
						nodes1.push(window.document.createElement("li"));
					}
					tmp1 = nodes1.shift();
					break;
				case "span":
					var nodes2 = snabbdom_engine_dom_DomPool.nodes_span;
					if(nodes2.length == 0) {
						nodes2.push(window.document.createElement("span"));
					}
					tmp1 = nodes2.shift();
					break;
				default:
					tmp1 = window.document.createElement(tag);
				}
			}
			elm = vnode1.elm = tmp1;
			if(Array.isArray(children)) {
				i1 = 0;
				while(i1 < children.length) {
					var new_node = snabbdom_engine_dom_PatchDom.createElm(children[i1],insertedVnodeQueue);
					window.requestAnimationFrame((function(element,this2) {
						return function(i2) {
							this2[0].appendChild(element[0]);
						};
					})([new_node],[elm]));
					++i1;
				}
			} else if(typeof vnode1.text == "string" || typeof vnode1.text == "number") {
				var this3 = elm;
				var element1 = window.document.createTextNode(vnode1.text);
				window.requestAnimationFrame(function(i3) {
					this3.appendChild(element1);
				});
			}
			snabbdom_engine_dom_plugins_Hooks.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
			if(vnode1.data != null) {
				i1 = vnode1.data.hook;
				if(i1 != undefined) {
					if(i1.create) {
						i1.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
					}
					if(i1.insert) {
						insertedVnodeQueue.push(vnode1);
					}
				}
			}
		} else {
			var this4 = window.document.createTextNode(vnode1.text);
			vnode1.elm = this4;
		}
		var this5 = oldVnode.parentElement;
		var this6 = this5;
		var e1 = vnode.elm;
		var e2 = oldVnode;
		window.requestAnimationFrame(function(i4) {
			this6.replaceChild(e1,e2);
		});
	} else {
		var data1 = { };
		var key = data1 == null?null:data1.key;
		oldVnode = { sel : oldVnode.tagName, data : data1, children : [], text : null, elm : oldVnode};
		snabbdom_engine_dom_PatchDom.patchVnode(oldVnode,vnode,insertedVnodeQueue);
	}
	var tmp_DF987B1D_3D0D_49B9_9249_A730787B70FD_1471088796e012 = function(__return) {
		var cb = function() {
			i = 0;
			var __doCount = 0;
			var __continue_0 = null;
			__continue_0 = function() {
				if(i < insertedVnodeQueue.length) {
					if(__doCount++ == 0) {
						while(true) {
							insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
							++i;
							__continue_0();
							if(!(--__doCount != 0)) {
								break;
							}
						}
					}
				} else {
					__return();
				}
			};
			var __continue_01 = __continue_0;
			__continue_01();
		};
		window.setTimeout(function() {
			cb();
		},0);
	};
	var fn = tmp_DF987B1D_3D0D_49B9_9249_A730787B70FD_1471088796e012;
	fn(thx_Functions.noop);
	return vnode;
};
snabbdom_engine_dom_PatchDom.patch = function(oldVnode,vnode) {
	var i = 0;
	var insertedVnodeQueue = [];
	snabbdom_engine_dom_PatchDom.patchVnode(oldVnode,vnode,insertedVnodeQueue);
	var tmp_C31B22EB_5698_4990_B67A_7EF3E9E83D42_1471088796e012 = function(__return) {
		var cb = function() {
			i = 0;
			var __doCount = 0;
			var __continue_2 = null;
			__continue_2 = function() {
				if(i < insertedVnodeQueue.length) {
					if(__doCount++ == 0) {
						while(true) {
							insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
							++i;
							__continue_2();
							if(!(--__doCount != 0)) {
								break;
							}
						}
					}
				} else {
					__return();
				}
			};
			var __continue_21 = __continue_2;
			__continue_21();
		};
		window.setTimeout(function() {
			cb();
		},0);
	};
	var fn = tmp_C31B22EB_5698_4990_B67A_7EF3E9E83D42_1471088796e012;
	fn(thx_Functions.noop);
	return vnode;
};
var snabbdom_engine_dom_plugins_Attributes = function() { };
snabbdom_engine_dom_plugins_Attributes.__name__ = true;
var snabbdom_engine_dom_plugins_Hooks = function() { };
snabbdom_engine_dom_plugins_Hooks.__name__ = true;
snabbdom_engine_dom_plugins_Hooks.create = function(oldVnode,vnode) {
	var elm = vnode.elm;
	var apply_hooks;
	var this1 = vnode.data.___cache;
	var mask = 2;
	if((this1 & mask) == mask == false) {
		apply_hooks = true;
	} else if(elm.___cache == null) {
		elm.___cache = true;
		apply_hooks = true;
	} else if(elm.___cache == true) {
		apply_hooks = false;
	} else {
		apply_hooks = true;
	}
	(function(__return) {
		if(apply_hooks) {
			var cb = function() {
				var cur;
				var elm1 = vnode.elm;
				var apply_styles;
				if(vnode.data.skip_styles == false) {
					apply_styles = true;
				} else if(elm1.cached_styles == null) {
					elm1.cached_styles = true;
					apply_styles = true;
				} else if(elm1.cached_styles == true) {
					apply_styles = false;
				} else {
					apply_styles = true;
				}
				if(apply_styles) {
					var oldStyle = oldVnode.data.style == null?{ }:oldVnode.data.style;
					var style = vnode.data.style == null?{ }:vnode.data.style;
					var oldHasDel = Object.prototype.hasOwnProperty.call(oldStyle,"delayed");
					var _g = 0;
					var _g1 = Object.keys(style);
					while(_g < _g1.length) {
						var name = [_g1[_g]];
						++_g;
						cur = style[name[0]];
						if(name[0] == "delayed") {
							var delayed = style.delayed;
							var oldDelayed = oldStyle.delayed;
							var _g2 = 0;
							var _g3 = Object.keys(delayed);
							while(_g2 < _g3.length) {
								var name1 = _g3[_g2];
								++_g2;
								cur = delayed[name1];
								if(!oldHasDel || cur != oldDelayed[name1]) {
									var obj = [elm1.style];
									var fn = [(function(val,prop,obj1) {
										return function(i) {
											obj1[0][prop[0]] = val[0];
										};
									})([cur],[name1],obj)];
									window.requestAnimationFrame((function(fn1) {
										return function(i1) {
											window.requestAnimationFrame(fn1[0]);
										};
									})(fn));
								}
							}
						} else if(name[0] != "remove" && cur != oldStyle[name[0]]) {
							window.requestAnimationFrame((function(name2) {
								return function(i2) {
									elm1.style[name2[0]] = cur;
								};
							})(name));
						}
					}
				}
				var cb1 = function() {
					var cur1;
					var old;
					var elm2 = vnode.elm;
					var oldAttrs = oldVnode.data.attrs == null?{ }:oldVnode.data.attrs;
					var attrs = vnode.data.attrs == null?{ }:vnode.data.attrs;
					var apply_attributes;
					if(vnode.data.skip_attributes == false) {
						apply_attributes = true;
					} else if(elm2.cached_attributes == null) {
						elm2.cached_attributes = true;
						apply_attributes = true;
					} else if(elm2.cached_attributes == true) {
						apply_attributes = false;
					} else {
						apply_attributes = true;
					}
					if(apply_attributes) {
						var _g4 = 0;
						var _g11 = Object.keys(attrs);
						while(_g4 < _g11.length) {
							var key = _g11[_g4];
							++_g4;
							cur1 = attrs[key];
							old = oldAttrs[key];
							if(old != cur1) {
								if(!cur1 && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key]) {
									window.requestAnimationFrame((function(_key) {
										return function(i3) {
											elm2.removeAttribute(_key[0]);
										};
									})([key]));
								} else {
									window.requestAnimationFrame((function(_cur,_key1) {
										return function(i4) {
											elm2.setAttribute(_key1[0],_cur[0]);
										};
									})([cur1],[key]));
								}
							}
						}
						var _g5 = 0;
						var _g12 = Object.keys(oldAttrs);
						while(_g5 < _g12.length) {
							var key1 = [_g12[_g5]];
							++_g5;
							if(!Object.prototype.hasOwnProperty.call(attrs,key1[0])) {
								window.requestAnimationFrame((function(key2) {
									return function(i5) {
										elm2.removeAttribute(key2[0]);
									};
								})(key1));
							}
						}
					}
					var cb2 = function() {
						var cur2;
						var old1;
						var elm3 = vnode.elm;
						var oldProps = oldVnode.data.props == null?{ }:oldVnode.data.props;
						var props = vnode.data.props == null?{ }:vnode.data.props;
						var _g6 = 0;
						var _g13 = Object.keys(props);
						while(_g6 < _g13.length) {
							var key3 = _g13[_g6];
							++_g6;
							cur2 = props[key3];
							old1 = oldProps[key3];
							if(old1 != cur2) {
								elm3[key3] = cur2;
							}
						}
						var cb3 = function() {
							var cur3;
							var elm4 = vnode.elm;
							var oldClass = oldVnode.data.classes == null?{ }:oldVnode.data.classes;
							var klass = vnode.data.classes == null?{ }:vnode.data.classes;
							if(vnode.data.skip_attributes == false) {
								var _g7 = 0;
								var _g14 = Object.keys(klass);
								while(_g7 < _g14.length) {
									var name3 = [_g14[_g7]];
									++_g7;
									cur3 = klass[name3[0]];
									if(cur3 != oldClass[name3[0]]) {
										if(cur3 == "add") {
											window.requestAnimationFrame((function(name4) {
												return function(i6) {
													elm4.classList.add(name4[0]);
												};
											})(name3));
										} else if(cur3 == "remove") {
											window.requestAnimationFrame((function(name5) {
												return function(i7) {
													elm4.classList.remove(name5[0]);
												};
											})(name3));
										}
									}
								}
							}
							var cb4 = function() {
								var cur4;
								var old2;
								var elm5 = vnode.elm;
								var oldOn = oldVnode.data.on == null?{ }:oldVnode.data.on;
								var on = vnode.data.on == null?{ }:vnode.data.on;
								if(on != { }) {
									var _g8 = 0;
									var _g15 = Object.keys(on);
									while(_g8 < _g15.length) {
										var name6 = _g15[_g8];
										++_g8;
										cur4 = on[name6];
										old2 = oldOn[name6];
										if(old2 == null) {
											console.log(cur4);
											on[name6] = cur4;
											elm5.addEventListener(name6,cur4);
										} else {
											on[name6] = cur4;
										}
									}
								}
								__return();
							};
							window.setTimeout(function() {
								cb4();
							},0);
						};
						window.setTimeout(function() {
							cb3();
						},0);
					};
					window.setTimeout(function() {
						cb2();
					},0);
				};
				window.setTimeout(function() {
					cb1();
				},0);
			};
			window.setTimeout(function() {
				cb();
			},0);
		} else {
			__return();
		}
	})(thx_Functions.noop);
};
snabbdom_engine_dom_plugins_Hooks.update = function(oldVnode,vnode) {
	var elm = vnode.elm;
	var apply_hooks;
	var this1 = vnode.data.___cache;
	var mask = 2;
	if((this1 & mask) == mask == false) {
		apply_hooks = true;
	} else if(elm.___cache == null) {
		elm.___cache = true;
		apply_hooks = true;
	} else if(elm.___cache == true) {
		apply_hooks = false;
	} else {
		apply_hooks = true;
	}
	(function(__return) {
		if(apply_hooks) {
			var cb = function() {
				var cur;
				var elm1 = vnode.elm;
				var apply_styles;
				if(vnode.data.skip_styles == false) {
					apply_styles = true;
				} else if(elm1.cached_styles == null) {
					elm1.cached_styles = true;
					apply_styles = true;
				} else if(elm1.cached_styles == true) {
					apply_styles = false;
				} else {
					apply_styles = true;
				}
				if(apply_styles) {
					var oldStyle = oldVnode.data.style == null?{ }:oldVnode.data.style;
					var style = vnode.data.style == null?{ }:vnode.data.style;
					var oldHasDel = Object.prototype.hasOwnProperty.call(oldStyle,"delayed");
					var _g = 0;
					var _g1 = Object.keys(style);
					while(_g < _g1.length) {
						var name = [_g1[_g]];
						++_g;
						cur = style[name[0]];
						if(name[0] == "delayed") {
							var delayed = style.delayed;
							var oldDelayed = oldStyle.delayed;
							var _g2 = 0;
							var _g3 = Object.keys(delayed);
							while(_g2 < _g3.length) {
								var name1 = _g3[_g2];
								++_g2;
								cur = delayed[name1];
								if(!oldHasDel || cur != oldDelayed[name1]) {
									var obj = [elm1.style];
									var fn = [(function(val,prop,obj1) {
										return function(i) {
											obj1[0][prop[0]] = val[0];
										};
									})([cur],[name1],obj)];
									window.requestAnimationFrame((function(fn1) {
										return function(i1) {
											window.requestAnimationFrame(fn1[0]);
										};
									})(fn));
								}
							}
						} else if(name[0] != "remove" && cur != oldStyle[name[0]]) {
							window.requestAnimationFrame((function(name2) {
								return function(i2) {
									elm1.style[name2[0]] = cur;
								};
							})(name));
						}
					}
				}
				var cb1 = function() {
					var cur1;
					var old;
					var elm2 = vnode.elm;
					var oldAttrs = oldVnode.data.attrs == null?{ }:oldVnode.data.attrs;
					var attrs = vnode.data.attrs == null?{ }:vnode.data.attrs;
					var apply_attributes;
					if(vnode.data.skip_attributes == false) {
						apply_attributes = true;
					} else if(elm2.cached_attributes == null) {
						elm2.cached_attributes = true;
						apply_attributes = true;
					} else if(elm2.cached_attributes == true) {
						apply_attributes = false;
					} else {
						apply_attributes = true;
					}
					if(apply_attributes) {
						var _g4 = 0;
						var _g11 = Object.keys(attrs);
						while(_g4 < _g11.length) {
							var key = _g11[_g4];
							++_g4;
							cur1 = attrs[key];
							old = oldAttrs[key];
							if(old != cur1) {
								if(!cur1 && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key]) {
									window.requestAnimationFrame((function(_key) {
										return function(i3) {
											elm2.removeAttribute(_key[0]);
										};
									})([key]));
								} else {
									window.requestAnimationFrame((function(_cur,_key1) {
										return function(i4) {
											elm2.setAttribute(_key1[0],_cur[0]);
										};
									})([cur1],[key]));
								}
							}
						}
						var _g5 = 0;
						var _g12 = Object.keys(oldAttrs);
						while(_g5 < _g12.length) {
							var key1 = [_g12[_g5]];
							++_g5;
							if(!Object.prototype.hasOwnProperty.call(attrs,key1[0])) {
								window.requestAnimationFrame((function(key2) {
									return function(i5) {
										elm2.removeAttribute(key2[0]);
									};
								})(key1));
							}
						}
					}
					var cb2 = function() {
						var cur2;
						var old1;
						var elm3 = vnode.elm;
						var oldProps = oldVnode.data.props == null?{ }:oldVnode.data.props;
						var props = vnode.data.props == null?{ }:vnode.data.props;
						var _g6 = 0;
						var _g13 = Object.keys(props);
						while(_g6 < _g13.length) {
							var key3 = _g13[_g6];
							++_g6;
							cur2 = props[key3];
							old1 = oldProps[key3];
							if(old1 != cur2) {
								elm3[key3] = cur2;
							}
						}
						var cb3 = function() {
							var cur3;
							var elm4 = vnode.elm;
							var oldClass = oldVnode.data.classes == null?{ }:oldVnode.data.classes;
							var klass = vnode.data.classes == null?{ }:vnode.data.classes;
							if(vnode.data.skip_attributes == false) {
								var _g7 = 0;
								var _g14 = Object.keys(klass);
								while(_g7 < _g14.length) {
									var name3 = [_g14[_g7]];
									++_g7;
									cur3 = klass[name3[0]];
									if(cur3 != oldClass[name3[0]]) {
										if(cur3 == "add") {
											window.requestAnimationFrame((function(name4) {
												return function(i6) {
													elm4.classList.add(name4[0]);
												};
											})(name3));
										} else if(cur3 == "remove") {
											window.requestAnimationFrame((function(name5) {
												return function(i7) {
													elm4.classList.remove(name5[0]);
												};
											})(name3));
										}
									}
								}
							}
							var cb4 = function() {
								var cur4;
								var old2;
								var elm5 = vnode.elm;
								var oldOn = oldVnode.data.on == null?{ }:oldVnode.data.on;
								var on = vnode.data.on == null?{ }:vnode.data.on;
								if(on != { }) {
									var _g8 = 0;
									var _g15 = Object.keys(on);
									while(_g8 < _g15.length) {
										var name6 = _g15[_g8];
										++_g8;
										cur4 = on[name6];
										old2 = oldOn[name6];
										if(old2 == null) {
											console.log(cur4);
											on[name6] = cur4;
											elm5.addEventListener(name6,cur4);
										} else {
											on[name6] = cur4;
										}
									}
								}
								__return();
							};
							window.setTimeout(function() {
								cb4();
							},0);
						};
						window.setTimeout(function() {
							cb3();
						},0);
					};
					window.setTimeout(function() {
						cb2();
					},0);
				};
				window.setTimeout(function() {
					cb1();
				},0);
			};
			window.setTimeout(function() {
				cb();
			},0);
		} else {
			console.log(elm);
			__return();
		}
	})(thx_Functions.noop);
};
snabbdom_engine_dom_plugins_Hooks.destroy = function(vnode) {
	(function(__return) {
		var cb = function() {
			var style = null;
			var elm = vnode.elm;
			var s = vnode.data.style;
			if(s != null) {
				style = s.destroy;
				if(style != null) {
					var _g = 0;
					var _g1 = Object.keys(style);
					while(_g < _g1.length) {
						var name = _g1[_g];
						++_g;
						elm.style[name] = style[name];
					}
				}
			}
			__return();
		};
		window.setTimeout(function() {
			cb();
		},0);
	})(thx_Functions.noop);
};
snabbdom_engine_dom_plugins_Hooks.remove = function(vnode,rm) {
	(function(__return) {
		var cb = function() {
			var rm1 = rm;
			var s = vnode.data.style;
			if(!s || !s.remove) {
				if(rm1 != null) {
					rm1();
				}
			} else {
				var elm = vnode.elm;
				var compStyle;
				var style = s.remove;
				var amount = 0;
				var applied = [];
				var _g = 0;
				var _g1 = Object.keys(style);
				while(_g < _g1.length) {
					var name = _g1[_g];
					++_g;
					applied.push(name);
					elm.style[name] = style[name];
				}
				compStyle = window.getComputedStyle(elm);
				var props = compStyle["transition-property"].split(", ");
				var i;
				i = 0;
				while(i < props.length) {
					if(applied.indexOf(props[i]) != -1) {
						++amount;
					}
					++i;
				}
				elm.addEventListener("transitionend",function(ev) {
					if(ev.target == elm) {
						--amount;
					}
					if(amount == 0) {
						rm1();
					}
				});
			}
			__return();
		};
		window.setTimeout(function() {
			cb();
		},0);
	})(thx_Functions.noop);
};
var thx_Arrays = function() { };
thx_Arrays.__name__ = true;
thx_Arrays.shuffle = function(a) {
	var t = thx_Ints.range(a.length);
	var array = [];
	while(t.length > 0) {
		var pos = Std.random(t.length);
		var index = t[pos];
		t.splice(pos,1);
		array.push(a[index]);
	}
	return array;
};
var thx_Either = { __ename__ : true, __constructs__ : ["Left","Right"] };
thx_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = thx_Either; return $x; };
thx_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = thx_Either; return $x; };
var thx_Functions = function() { };
thx_Functions.__name__ = true;
thx_Functions.noop = function() {
};
var thx_Ints = function() { };
thx_Ints.__name__ = true;
thx_Ints.range = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	if(null == stop) {
		stop = start;
		start = 0;
	}
	if((stop - start) / step == Infinity) {
		throw new js__$Boot_HaxeError("infinite range");
	}
	var range = [];
	var i = -1;
	var j;
	if(step < 0) {
		while(true) {
			j = start + step * ++i;
			if(!(j > stop)) {
				break;
			}
			range.push(j);
		}
	} else {
		while(true) {
			j = start + step * ++i;
			if(!(j < stop)) {
				break;
			}
			range.push(j);
		}
	}
	return range;
};
String.__name__ = true;
Array.__name__ = true;
snabbdom_engine_dom_DomPool.nodes_div = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1_min = 0;
		var _g1_max = 20;
		while(_g1_min < _g1_max) {
			var i = _g1_min++;
			_g.push(window.document.createElement("div"));
		}
	}
	$r = _g;
	return $r;
}(this));
snabbdom_engine_dom_DomPool.nodes_li = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1_min = 0;
		var _g1_max = 20;
		while(_g1_min < _g1_max) {
			var i = _g1_min++;
			_g.push(window.document.createElement("li"));
		}
	}
	$r = _g;
	return $r;
}(this));
snabbdom_engine_dom_DomPool.nodes_span = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1_min = 0;
		var _g1_max = 20;
		while(_g1_min < _g1_max) {
			var i = _g1_min++;
			_g.push(window.document.createElement("span"));
		}
	}
	$r = _g;
	return $r;
}(this));
snabbdom_engine_dom_PatchDom.emptyNode = (function($this) {
	var $r;
	var data = { };
	$r = { sel : "", data : data, children : [], text : null, elm : null};
	return $r;
}(this));
snabbdom_engine_dom_plugins_Attributes.booleanAttrs = ["allowfullscreen","async","autofocus","autoplay","checked","compact","controls","declare","default","defaultchecked","defaultmuted","defaultselected","defer","disabled","draggable","enabled","formnovalidate","hidden","indeterminate","inert","ismap","itemscope","loop","multiple","muted","nohref","noresize","noshade","novalidate","nowrap","open","pauseonexit","readonly","required","reversed","scoped","seamless","selected","sortable","spellcheck","translate","truespeed","typemustmatch","visible"];
snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict = (function($this) {
	var $r;
	var hash = { };
	var len = snabbdom_engine_dom_plugins_Attributes.booleanAttrs.length;
	var i = 0;
	{
		i = 0;
		while(i < len) {
			hash[snabbdom_engine_dom_plugins_Attributes.booleanAttrs[i]] = true;
			++i;
		}
	}
	$r = hash;
	return $r;
}(this));
snabbdom_Main.main();
})();
