// Generated by Haxe 3.3.0
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = true;
haxe_Timer.prototype = {
	run: function() {
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var partials_Partial = function() { };
partials_Partial.__name__ = true;
var snabbdom_Main = function() { };
snabbdom_Main.__name__ = true;
snabbdom_Main.click = function(e) {
	console.log("click");
};
snabbdom_Main.over = function(e) {
	console.log("over");
};
snabbdom_Main.out = function(e) {
	console.log("out");
};
snabbdom_Main.main = function() {
	var txt = "testo";
	var vnode_sel = "div";
	var vnode_data = { attrs : { id : "pippa"}, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null};
	var vnode_children = [{ sel : "ul", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : [{ sel : "li", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, key : null, text : "1"},{ sel : "li", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, key : null, text : "2"},{ sel : "li", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, key : null, text : "3"},{ sel : "li", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, key : null, text : "4"},{ sel : "li", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, key : null, text : "5"},{ sel : "li", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : [{ sel : "span", data : { attrs : { }, skip_styles : true, skip_attributes : false, props : null, classes : null, style : null, hook : null, on : { 'click' : snabbdom_Main.click}}, children : null, elm : null, key : null, text : txt}], elm : null, key : null, text : null}], elm : null, key : null, text : null}];
	var vnode_elm = null;
	var vnode_key = null;
	var vnode_text = null;
	var last_node = null;
	var timer = new haxe_Timer(250);
	var init = null;
	timer.run = function() {
		var rnd = Math.random();
		var color = thx_Arrays.shuffle(["red","yellow","green","black","white","grey"])[0];
		var bg = thx_Arrays.shuffle(["red","yellow","green","black","white","grey"])[0];
		var max = 20;
		if(max <= 3) {
			max = 4;
		}
		if(init == null) {
			init = 0;
		} else {
			init = 3;
		}
		var _g = [];
		var _g1_min = init;
		var _g1_max = max;
		while(_g1_min < _g1_max) {
			var x = _g1_min++;
			var key = "key - " + x;
			var random = Math.random() * 5000;
			_g.push({ sel : "li", data : { attrs : { key : key}, style : { border : "10px solid green"}, skip_styles : true, skip_attributes : false, props : null, classes : null, hook : null}, children : [{ sel : "span", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, key : null, text : random}], elm : null, key : null, text : null});
		}
		var list = _g;
		var vnode2 = { sel : "div", data : { attrs : { id : "pippa"}, style : { color : "black"}, skip_styles : true, skip_attributes : false, props : null, classes : null, hook : null, on : { 'click' : snabbdom_Main.click, 'mouseout' : snabbdom_Main.out, 'mouseover' : snabbdom_Main.over}}, children : [{ sel : "span", data : { attrs : { }, skip_styles : true, skip_attributes : true, props : null, classes : null, style : null, hook : null}, children : null, elm : null, key : null, text : max},{ sel : "ul", data : { attrs : { }, style : { fontSize : "30px", color : "white", backgroundColor : bg}, skip_styles : false, skip_attributes : false, props : null, classes : null, hook : null}, children : list, elm : null, key : null, text : null}], elm : null, key : null, text : null};
		if(last_node == null) {
			snabbdom_engine_dom_PatchDom.patchDom(window.document.getElementById("container"),vnode2);
		} else {
			snabbdom_engine_dom_PatchDom.patch(last_node,vnode2);
		}
		last_node = vnode2;
	};
	timer.run();
};
var snabbdom_engine_dom_PatchDom = function() { };
snabbdom_engine_dom_PatchDom.__name__ = true;
snabbdom_engine_dom_PatchDom.__interfaces__ = [partials_Partial];
snabbdom_engine_dom_PatchDom.createElm = function(vnode,insertedVnodeQueue) {
	var i;
	var data = vnode.data;
	if(data != undefined) {
		var tmp;
		i = data.hook;
		if(i != undefined) {
			i = i.init;
			tmp = i != undefined;
		} else {
			tmp = false;
		}
		if(tmp) {
			i(vnode);
		}
		i = data.vnode;
		if(i != undefined) {
			vnode = i;
		}
	}
	var elm;
	var children = vnode.children;
	var sel = vnode.sel;
	if(sel != undefined) {
		var hashIdx = sel.indexOf("#",0);
		var dotIdx = sel.indexOf(".",hashIdx);
		var hash = hashIdx > 0?hashIdx:sel.length;
		var dot = dotIdx > 0?dotIdx:sel.length;
		var tag = hashIdx != -1 || dotIdx != -1?sel.slice(0,Math.min(hash,dot)):sel;
		var tmp1;
		var tmp2;
		if(data != undefined) {
			i = data.ns;
			tmp2 = i != undefined;
		} else {
			tmp2 = false;
		}
		if(tmp2) {
			tmp1 = window.document.createElementNS(i,tag);
		} else {
			tmp1 = window.document.createElement(tag);
		}
		elm = vnode.elm = tmp1;
		if(hash < dot) {
			elm.id = sel.slice(hash + 1,dot);
		}
		if(Array.isArray(children)) {
			i = 0;
			while(i < children.length) {
				var new_node = snabbdom_engine_dom_PatchDom.createElm(children[i],insertedVnodeQueue);
				window.requestAnimationFrame((function(element,this1) {
					return function(i1) {
						this1[0].appendChild(element[0]);
					};
				})([new_node],[elm]));
				++i;
			}
		} else if(typeof vnode.text == "string" || typeof vnode.text == "number") {
			var this2 = elm;
			var element1 = window.document.createTextNode(vnode.text);
			window.requestAnimationFrame(function(i2) {
				this2.appendChild(element1);
			});
		}
		var oldVnode = snabbdom_engine_dom_PatchDom.emptyNode;
		var key;
		var cur;
		var old;
		var elm1 = vnode.elm;
		var oldAttrs = oldVnode.data.attrs == null?{ }:oldVnode.data.attrs;
		var attrs = vnode.data.attrs == null?{ }:vnode.data.attrs;
		var apply_attributes;
		if(vnode.data.skip_attributes == false) {
			apply_attributes = true;
		} else if(elm1.cached_attributes == null) {
			elm1.cached_attributes = true;
			apply_attributes = true;
		} else if(elm1.cached_attributes == true) {
			apply_attributes = false;
		} else {
			apply_attributes = true;
		}
		if(apply_attributes) {
			var _g = 0;
			var _g1 = Object.keys(attrs);
			while(_g < _g1.length) {
				var key1 = [_g1[_g]];
				++_g;
				cur = attrs[key1[0]];
				old = oldAttrs[key1[0]];
				if(old != cur) {
					if(!cur && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key1[0]]) {
						window.requestAnimationFrame((function(key2) {
							return function(i3) {
								elm1.removeAttribute(key2[0]);
							};
						})(key1));
					} else {
						window.requestAnimationFrame((function(key3) {
							return function(i4) {
								elm1.setAttribute(key3[0],cur);
							};
						})(key1));
					}
				}
			}
			var _g2 = 0;
			var _g11 = Object.keys(oldAttrs);
			while(_g2 < _g11.length) {
				var key4 = [_g11[_g2]];
				++_g2;
				if(!Object.prototype.hasOwnProperty.call(attrs,key4[0])) {
					window.requestAnimationFrame((function(key5) {
						return function(i5) {
							elm1.removeAttribute(key5[0]);
						};
					})(key4));
				}
			}
		}
		var key6;
		var cur1;
		var old1;
		var elm2 = vnode.elm;
		var oldProps = oldVnode.data.props == null?{ }:oldVnode.data.props;
		var props = vnode.data.props == null?{ }:vnode.data.props;
		var _g3 = 0;
		var _g12 = Object.keys(props);
		while(_g3 < _g12.length) {
			var key7 = _g12[_g3];
			++_g3;
			cur1 = props[key7];
			old1 = oldProps[key7];
			if(old1 != cur1) {
				elm2[key7] = cur1;
			}
		}
		var cur2;
		var name;
		var elm3 = vnode.elm;
		var oldClass = oldVnode.data.classes == null?{ }:oldVnode.data.classes;
		var klass = vnode.data.classes == null?{ }:vnode.data.classes;
		if(vnode.data.skip_attributes == false) {
			var _g4 = 0;
			var _g13 = Object.keys(klass);
			while(_g4 < _g13.length) {
				var name1 = [_g13[_g4]];
				++_g4;
				cur2 = klass[name1[0]];
				if(cur2 != oldClass[name1[0]]) {
					if(cur2 == "add") {
						window.requestAnimationFrame((function(name2) {
							return function(i6) {
								elm3.classList.add(name2[0]);
							};
						})(name1));
					} else if(cur2 == "remove") {
						window.requestAnimationFrame((function(name3) {
							return function(i7) {
								elm3.classList.remove(name3[0]);
							};
						})(name1));
					}
				}
			}
		}
		var cur3;
		var name4;
		var elm4 = vnode.elm;
		var apply_styles;
		if(vnode.data.skip_styles == false) {
			apply_styles = true;
		} else if(elm4.cached_styles == null) {
			elm4.cached_styles = true;
			apply_styles = true;
		} else if(elm4.cached_styles == true) {
			apply_styles = false;
		} else {
			apply_styles = true;
		}
		if(apply_styles) {
			console.log(vnode);
			var oldStyle = oldVnode.data.style == null?{ }:oldVnode.data.style;
			var style = vnode.data.style == null?{ }:vnode.data.style;
			var oldHasDel = Object.prototype.hasOwnProperty.call(oldStyle,"delayed");
			var _g5 = 0;
			var _g14 = Object.keys(style);
			while(_g5 < _g14.length) {
				var name5 = [_g14[_g5]];
				++_g5;
				cur3 = style[name5[0]];
				if(name5[0] == "delayed") {
					var delayed = style.delayed;
					var oldDelayed = oldStyle.delayed;
					var _g21 = 0;
					var _g31 = Object.keys(delayed);
					while(_g21 < _g31.length) {
						var name6 = _g31[_g21];
						++_g21;
						cur3 = delayed[name6];
						if(!oldHasDel || cur3 != oldDelayed[name6]) {
							var obj = [elm4.style];
							var fn = [(function(val,prop,obj1) {
								return function(i8) {
									obj1[0][prop[0]] = val[0];
								};
							})([cur3],[name6],obj)];
							window.requestAnimationFrame((function(fn1) {
								return function(i9) {
									window.requestAnimationFrame(fn1[0]);
								};
							})(fn));
						}
					}
				} else if(name5[0] != "remove" && cur3 != oldStyle[name5[0]]) {
					window.requestAnimationFrame((function(name7) {
						return function(i10) {
							elm4.style[name7[0]] = cur3;
						};
					})(name5));
				}
			}
		}
		var name8;
		var cur4;
		var old2;
		var elm5 = vnode.elm;
		var oldOn = oldVnode.data.on == null?{ }:oldVnode.data.on;
		var on = vnode.data.on == null?{ }:vnode.data.on;
		if(on != { }) {
			var _g6 = 0;
			var _g15 = Object.keys(on);
			while(_g6 < _g15.length) {
				var name9 = _g15[_g6];
				++_g6;
				cur4 = on[name9];
				old2 = oldOn[name9];
				if(old2 == null) {
					console.log(cur4);
					on[name9] = cur4;
					elm5.addEventListener(name9,cur4);
				} else {
					on[name9] = cur4;
				}
			}
		}
		if(vnode.data != null) {
			i = vnode.data.hook;
			if(i != undefined) {
				if(i.create) {
					i.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode);
				}
				if(i.insert) {
					insertedVnodeQueue.push(vnode);
				}
			}
		}
	} else {
		var this3 = window.document.createTextNode(vnode.text);
		elm = vnode.elm = this3;
	}
	return vnode.elm;
};
snabbdom_engine_dom_PatchDom.invokeDestroyHook = function(vnode) {
	var i = vnode.data;
	var j;
	if(i != undefined) {
		var tmp;
		i = i.hook;
		if(i != undefined) {
			i = i.destroy;
			tmp = i != undefined;
		} else {
			tmp = false;
		}
		if(tmp) {
			i(vnode);
		}
		var style = null;
		var name;
		var elm = vnode.elm;
		var s = vnode.data.style;
		if(s != null) {
			style = s.destroy;
			if(style != null) {
				var _g = 0;
				var _g1 = Object.keys(style);
				while(_g < _g1.length) {
					var name1 = _g1[_g];
					++_g;
					elm.style[name1] = style[name1];
				}
			}
		}
		i = vnode.children;
		if(i != undefined) {
			j = 0;
			while(j < vnode.children.length) {
				snabbdom_engine_dom_PatchDom.invokeDestroyHook(vnode.children[j]);
				++j;
			}
		}
	}
};
snabbdom_engine_dom_PatchDom.updateChildren = function(parentElm,oldCh,newCh,insertedVnodeQueue) {
	var oldStartIdx = 0;
	var newStartIdx = 0;
	var oldEndIdx = oldCh.length - 1;
	var oldStartVnode = oldCh[0];
	var oldEndVnode = oldCh[oldEndIdx];
	var newEndIdx = newCh.length - 1;
	var newStartVnode = newCh[0];
	var newEndVnode = newCh[newEndIdx];
	var oldKeyToIdx = null;
	var idxInOld;
	var elmToMove;
	var before;
	while(oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) if(oldStartVnode == undefined) {
		oldStartVnode = oldCh[++oldStartIdx];
	} else if(oldEndVnode == undefined) {
		oldEndVnode = oldCh[--oldEndIdx];
	} else if(oldStartVnode.key == newStartVnode.key && oldStartVnode.sel == newStartVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldStartVnode,newStartVnode,insertedVnodeQueue);
		oldStartVnode = oldCh[++oldStartIdx];
		newStartVnode = newCh[++newStartIdx];
	} else if(oldEndVnode.key == newEndVnode.key && oldEndVnode.sel == newEndVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldEndVnode,newEndVnode,insertedVnodeQueue);
		oldEndVnode = oldCh[--oldEndIdx];
		newEndVnode = newCh[--newEndIdx];
	} else if(oldStartVnode.key == newEndVnode.key && oldStartVnode.sel == newEndVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldStartVnode,newEndVnode,insertedVnodeQueue);
		var this1 = [parentElm];
		var new_node = [oldStartVnode.elm];
		var this2 = oldEndVnode.elm.nextSibling;
		window.requestAnimationFrame((function(ref_node,new_node1,this3) {
			return function(i) {
				this3[0].insertBefore(new_node1[0],ref_node[0]);
			};
		})([this2],new_node,this1));
		oldStartVnode = oldCh[++oldStartIdx];
		newEndVnode = newCh[--newEndIdx];
	} else if(oldEndVnode.key == newStartVnode.key && oldEndVnode.sel == newStartVnode.sel) {
		snabbdom_engine_dom_PatchDom.patchVnode(oldEndVnode,newStartVnode,insertedVnodeQueue);
		window.requestAnimationFrame((function(ref_node1,new_node2,this4) {
			return function(i1) {
				this4[0].insertBefore(new_node2[0],ref_node1[0]);
			};
		})([oldStartVnode.elm],[oldEndVnode.elm],[parentElm]));
		oldEndVnode = oldCh[--oldEndIdx];
		newStartVnode = newCh[++newStartIdx];
	} else {
		if(oldKeyToIdx == undefined) {
			var i2;
			var map = { };
			var key;
			i2 = oldStartIdx;
			while(i2 <= oldEndIdx) {
				key = oldCh[i2].key;
				if(key != undefined) {
					map[key] = i2;
				}
				++i2;
			}
			oldKeyToIdx = map;
		}
		idxInOld = oldKeyToIdx[newStartVnode.key];
		if(idxInOld == undefined) {
			var vnode = newStartVnode;
			var i3;
			var data = vnode.data;
			if(data != undefined) {
				var tmp;
				i3 = data.hook;
				if(i3 != undefined) {
					i3 = i3.init;
					tmp = i3 != undefined;
				} else {
					tmp = false;
				}
				if(tmp) {
					i3(vnode);
				}
				i3 = data.vnode;
				if(i3 != undefined) {
					vnode = i3;
				}
			}
			var elm;
			var children = vnode.children;
			var sel = vnode.sel;
			if(sel != undefined) {
				var hashIdx = sel.indexOf("#",0);
				var dotIdx = sel.indexOf(".",hashIdx);
				var hash = hashIdx > 0?hashIdx:sel.length;
				var dot = dotIdx > 0?dotIdx:sel.length;
				var tag = hashIdx != -1 || dotIdx != -1?sel.slice(0,Math.min(hash,dot)):sel;
				var tmp1;
				var tmp2;
				if(data != undefined) {
					i3 = data.ns;
					tmp2 = i3 != undefined;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = window.document.createElementNS(i3,tag);
				} else {
					tmp1 = window.document.createElement(tag);
				}
				elm = vnode.elm = tmp1;
				if(hash < dot) {
					elm.id = sel.slice(hash + 1,dot);
				}
				if(Array.isArray(children)) {
					i3 = 0;
					while(i3 < children.length) {
						var new_node3 = snabbdom_engine_dom_PatchDom.createElm(children[i3],insertedVnodeQueue);
						window.requestAnimationFrame((function(element,this5) {
							return function(i4) {
								this5[0].appendChild(element[0]);
							};
						})([new_node3],[elm]));
						++i3;
					}
				} else if(typeof vnode.text == "string" || typeof vnode.text == "number") {
					var this6 = [elm];
					var element1 = [window.document.createTextNode(vnode.text)];
					window.requestAnimationFrame((function(element2,this7) {
						return function(i5) {
							this7[0].appendChild(element2[0]);
						};
					})(element1,this6));
				}
				var oldVnode = snabbdom_engine_dom_PatchDom.emptyNode;
				var key1;
				var cur = [];
				var old;
				var elm1 = [vnode.elm];
				var oldAttrs = oldVnode.data.attrs == null?{ }:oldVnode.data.attrs;
				var attrs = vnode.data.attrs == null?{ }:vnode.data.attrs;
				var apply_attributes;
				if(vnode.data.skip_attributes == false) {
					apply_attributes = true;
				} else if(elm1[0].cached_attributes == null) {
					elm1[0].cached_attributes = true;
					apply_attributes = true;
				} else if(elm1[0].cached_attributes == true) {
					apply_attributes = false;
				} else {
					apply_attributes = true;
				}
				if(apply_attributes) {
					var _g = 0;
					var _g1 = Object.keys(attrs);
					while(_g < _g1.length) {
						var key2 = [_g1[_g]];
						++_g;
						cur[0] = attrs[key2[0]];
						old = oldAttrs[key2[0]];
						if(old != cur[0]) {
							if(!cur[0] && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key2[0]]) {
								window.requestAnimationFrame((function(key3,elm2) {
									return function(i6) {
										elm2[0].removeAttribute(key3[0]);
									};
								})(key2,elm1));
							} else {
								window.requestAnimationFrame((function(key4,elm3,cur1) {
									return function(i7) {
										elm3[0].setAttribute(key4[0],cur1[0]);
									};
								})(key2,elm1,cur));
							}
						}
					}
					var _g2 = 0;
					var _g11 = Object.keys(oldAttrs);
					while(_g2 < _g11.length) {
						var key5 = [_g11[_g2]];
						++_g2;
						if(!Object.prototype.hasOwnProperty.call(attrs,key5[0])) {
							window.requestAnimationFrame((function(key6,elm4) {
								return function(i8) {
									elm4[0].removeAttribute(key6[0]);
								};
							})(key5,elm1));
						}
					}
				}
				var key7;
				var cur2;
				var old1;
				var elm5 = vnode.elm;
				var oldProps = oldVnode.data.props == null?{ }:oldVnode.data.props;
				var props = vnode.data.props == null?{ }:vnode.data.props;
				var _g3 = 0;
				var _g12 = Object.keys(props);
				while(_g3 < _g12.length) {
					var key8 = _g12[_g3];
					++_g3;
					cur2 = props[key8];
					old1 = oldProps[key8];
					if(old1 != cur2) {
						elm5[key8] = cur2;
					}
				}
				var cur3;
				var name;
				var elm6 = [vnode.elm];
				var oldClass = oldVnode.data.classes == null?{ }:oldVnode.data.classes;
				var klass = vnode.data.classes == null?{ }:vnode.data.classes;
				if(vnode.data.skip_attributes == false) {
					var _g4 = 0;
					var _g13 = Object.keys(klass);
					while(_g4 < _g13.length) {
						var name1 = [_g13[_g4]];
						++_g4;
						cur3 = klass[name1[0]];
						if(cur3 != oldClass[name1[0]]) {
							if(cur3 == "add") {
								window.requestAnimationFrame((function(name2,elm7) {
									return function(i9) {
										elm7[0].classList.add(name2[0]);
									};
								})(name1,elm6));
							} else if(cur3 == "remove") {
								window.requestAnimationFrame((function(name3,elm8) {
									return function(i10) {
										elm8[0].classList.remove(name3[0]);
									};
								})(name1,elm6));
							}
						}
					}
				}
				var cur4 = [];
				var name4;
				var elm9 = [vnode.elm];
				var apply_styles;
				if(vnode.data.skip_styles == false) {
					apply_styles = true;
				} else if(elm9[0].cached_styles == null) {
					elm9[0].cached_styles = true;
					apply_styles = true;
				} else if(elm9[0].cached_styles == true) {
					apply_styles = false;
				} else {
					apply_styles = true;
				}
				if(apply_styles) {
					console.log(vnode);
					var oldStyle = oldVnode.data.style == null?{ }:oldVnode.data.style;
					var style = vnode.data.style == null?{ }:vnode.data.style;
					var oldHasDel = Object.prototype.hasOwnProperty.call(oldStyle,"delayed");
					var _g5 = 0;
					var _g14 = Object.keys(style);
					while(_g5 < _g14.length) {
						var name5 = [_g14[_g5]];
						++_g5;
						cur4[0] = style[name5[0]];
						if(name5[0] == "delayed") {
							var delayed = style.delayed;
							var oldDelayed = oldStyle.delayed;
							var _g21 = 0;
							var _g31 = Object.keys(delayed);
							while(_g21 < _g31.length) {
								var name6 = _g31[_g21];
								++_g21;
								cur4[0] = delayed[name6];
								if(!oldHasDel || cur4[0] != oldDelayed[name6]) {
									var obj = [elm9[0].style];
									var prop = [name6];
									var val = [cur4[0]];
									var fn = [(function(val1,prop1,obj1) {
										return function(i11) {
											obj1[0][prop1[0]] = val1[0];
										};
									})(val,prop,obj)];
									window.requestAnimationFrame((function(fn1) {
										return function(i12) {
											window.requestAnimationFrame(fn1[0]);
										};
									})(fn));
								}
							}
						} else if(name5[0] != "remove" && cur4[0] != oldStyle[name5[0]]) {
							window.requestAnimationFrame((function(name7,elm10,cur5) {
								return function(i13) {
									elm10[0].style[name7[0]] = cur5[0];
								};
							})(name5,elm9,cur4));
						}
					}
				}
				var name8;
				var cur6;
				var old2;
				var elm11 = vnode.elm;
				var oldOn = oldVnode.data.on == null?{ }:oldVnode.data.on;
				var on = vnode.data.on == null?{ }:vnode.data.on;
				if(on != { }) {
					var _g6 = 0;
					var _g15 = Object.keys(on);
					while(_g6 < _g15.length) {
						var name9 = _g15[_g6];
						++_g6;
						cur6 = on[name9];
						old2 = oldOn[name9];
						if(old2 == null) {
							console.log(cur6);
							on[name9] = cur6;
							elm11.addEventListener(name9,cur6);
						} else {
							on[name9] = cur6;
						}
					}
				}
				if(vnode.data != null) {
					i3 = vnode.data.hook;
					if(i3 != undefined) {
						if(i3.create) {
							i3.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode);
						}
						if(i3.insert) {
							insertedVnodeQueue.push(vnode);
						}
					}
				}
			} else {
				var this8 = window.document.createTextNode(vnode.text);
				elm = vnode.elm = this8;
			}
			var new_node4 = vnode.elm;
			window.requestAnimationFrame((function(ref_node2,new_node5,this9) {
				return function(i14) {
					this9[0].insertBefore(new_node5[0],ref_node2[0]);
				};
			})([oldStartVnode.elm],[new_node4],[parentElm]));
			newStartVnode = newCh[++newStartIdx];
		} else {
			elmToMove = oldCh[idxInOld];
			snabbdom_engine_dom_PatchDom.patchVnode(elmToMove,newStartVnode,insertedVnodeQueue);
			oldCh[idxInOld] = null;
			window.requestAnimationFrame((function(ref_node3,new_node6,this10) {
				return function(i15) {
					this10[0].insertBefore(new_node6[0],ref_node3[0]);
				};
			})([oldStartVnode.elm],[elmToMove.elm],[parentElm]));
			newStartVnode = newCh[++newStartIdx];
		}
	}
	if(oldStartIdx > oldEndIdx) {
		if(newCh[newEndIdx + 1] == undefined) {
			before = null;
		} else {
			before = newCh[newEndIdx + 1].elm;
		}
		var startIdx = newStartIdx;
		var i16;
		var new_node7;
		i16 = 0;
		while(startIdx <= newEndIdx) {
			var vnode1 = newCh[startIdx];
			var i17;
			var data1 = vnode1.data;
			if(data1 != undefined) {
				var tmp3;
				i17 = data1.hook;
				if(i17 != undefined) {
					i17 = i17.init;
					tmp3 = i17 != undefined;
				} else {
					tmp3 = false;
				}
				if(tmp3) {
					i17(vnode1);
				}
				i17 = data1.vnode;
				if(i17 != undefined) {
					vnode1 = i17;
				}
			}
			var elm12;
			var children1 = vnode1.children;
			var sel1 = vnode1.sel;
			if(sel1 != undefined) {
				var hashIdx1 = sel1.indexOf("#",0);
				var dotIdx1 = sel1.indexOf(".",hashIdx1);
				var hash1 = hashIdx1 > 0?hashIdx1:sel1.length;
				var dot1 = dotIdx1 > 0?dotIdx1:sel1.length;
				var tag1 = hashIdx1 != -1 || dotIdx1 != -1?sel1.slice(0,Math.min(hash1,dot1)):sel1;
				var tmp4;
				var tmp5;
				if(data1 != undefined) {
					i17 = data1.ns;
					tmp5 = i17 != undefined;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = window.document.createElementNS(i17,tag1);
				} else {
					tmp4 = window.document.createElement(tag1);
				}
				elm12 = vnode1.elm = tmp4;
				if(hash1 < dot1) {
					elm12.id = sel1.slice(hash1 + 1,dot1);
				}
				if(Array.isArray(children1)) {
					i17 = 0;
					while(i17 < children1.length) {
						var new_node8 = snabbdom_engine_dom_PatchDom.createElm(children1[i17],insertedVnodeQueue);
						window.requestAnimationFrame((function(element3,this11) {
							return function(i18) {
								this11[0].appendChild(element3[0]);
							};
						})([new_node8],[elm12]));
						++i17;
					}
				} else if(typeof vnode1.text == "string" || typeof vnode1.text == "number") {
					var this12 = [elm12];
					var element4 = [window.document.createTextNode(vnode1.text)];
					window.requestAnimationFrame((function(element5,this13) {
						return function(i19) {
							this13[0].appendChild(element5[0]);
						};
					})(element4,this12));
				}
				var oldVnode1 = snabbdom_engine_dom_PatchDom.emptyNode;
				var key9;
				var cur7 = [];
				var old3;
				var elm13 = [vnode1.elm];
				var oldAttrs1 = oldVnode1.data.attrs == null?{ }:oldVnode1.data.attrs;
				var attrs1 = vnode1.data.attrs == null?{ }:vnode1.data.attrs;
				var apply_attributes1;
				if(vnode1.data.skip_attributes == false) {
					apply_attributes1 = true;
				} else if(elm13[0].cached_attributes == null) {
					elm13[0].cached_attributes = true;
					apply_attributes1 = true;
				} else if(elm13[0].cached_attributes == true) {
					apply_attributes1 = false;
				} else {
					apply_attributes1 = true;
				}
				if(apply_attributes1) {
					var _g7 = 0;
					var _g16 = Object.keys(attrs1);
					while(_g7 < _g16.length) {
						var key10 = [_g16[_g7]];
						++_g7;
						cur7[0] = attrs1[key10[0]];
						old3 = oldAttrs1[key10[0]];
						if(old3 != cur7[0]) {
							if(!cur7[0] && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key10[0]]) {
								window.requestAnimationFrame((function(key11,elm14) {
									return function(i20) {
										elm14[0].removeAttribute(key11[0]);
									};
								})(key10,elm13));
							} else {
								window.requestAnimationFrame((function(key12,elm15,cur8) {
									return function(i21) {
										elm15[0].setAttribute(key12[0],cur8[0]);
									};
								})(key10,elm13,cur7));
							}
						}
					}
					var _g8 = 0;
					var _g17 = Object.keys(oldAttrs1);
					while(_g8 < _g17.length) {
						var key13 = [_g17[_g8]];
						++_g8;
						if(!Object.prototype.hasOwnProperty.call(attrs1,key13[0])) {
							window.requestAnimationFrame((function(key14,elm16) {
								return function(i22) {
									elm16[0].removeAttribute(key14[0]);
								};
							})(key13,elm13));
						}
					}
				}
				var key15;
				var cur9;
				var old4;
				var elm17 = vnode1.elm;
				var oldProps1 = oldVnode1.data.props == null?{ }:oldVnode1.data.props;
				var props1 = vnode1.data.props == null?{ }:vnode1.data.props;
				var _g9 = 0;
				var _g18 = Object.keys(props1);
				while(_g9 < _g18.length) {
					var key16 = _g18[_g9];
					++_g9;
					cur9 = props1[key16];
					old4 = oldProps1[key16];
					if(old4 != cur9) {
						elm17[key16] = cur9;
					}
				}
				var cur10;
				var name10;
				var elm18 = [vnode1.elm];
				var oldClass1 = oldVnode1.data.classes == null?{ }:oldVnode1.data.classes;
				var klass1 = vnode1.data.classes == null?{ }:vnode1.data.classes;
				if(vnode1.data.skip_attributes == false) {
					var _g10 = 0;
					var _g19 = Object.keys(klass1);
					while(_g10 < _g19.length) {
						var name11 = [_g19[_g10]];
						++_g10;
						cur10 = klass1[name11[0]];
						if(cur10 != oldClass1[name11[0]]) {
							if(cur10 == "add") {
								window.requestAnimationFrame((function(name12,elm19) {
									return function(i23) {
										elm19[0].classList.add(name12[0]);
									};
								})(name11,elm18));
							} else if(cur10 == "remove") {
								window.requestAnimationFrame((function(name13,elm20) {
									return function(i24) {
										elm20[0].classList.remove(name13[0]);
									};
								})(name11,elm18));
							}
						}
					}
				}
				var cur11 = [];
				var name14;
				var elm21 = [vnode1.elm];
				var apply_styles1;
				if(vnode1.data.skip_styles == false) {
					apply_styles1 = true;
				} else if(elm21[0].cached_styles == null) {
					elm21[0].cached_styles = true;
					apply_styles1 = true;
				} else if(elm21[0].cached_styles == true) {
					apply_styles1 = false;
				} else {
					apply_styles1 = true;
				}
				if(apply_styles1) {
					console.log(vnode1);
					var oldStyle1 = oldVnode1.data.style == null?{ }:oldVnode1.data.style;
					var style1 = vnode1.data.style == null?{ }:vnode1.data.style;
					var oldHasDel1 = Object.prototype.hasOwnProperty.call(oldStyle1,"delayed");
					var _g20 = 0;
					var _g110 = Object.keys(style1);
					while(_g20 < _g110.length) {
						var name15 = [_g110[_g20]];
						++_g20;
						cur11[0] = style1[name15[0]];
						if(name15[0] == "delayed") {
							var delayed1 = style1.delayed;
							var oldDelayed1 = oldStyle1.delayed;
							var _g22 = 0;
							var _g32 = Object.keys(delayed1);
							while(_g22 < _g32.length) {
								var name16 = _g32[_g22];
								++_g22;
								cur11[0] = delayed1[name16];
								if(!oldHasDel1 || cur11[0] != oldDelayed1[name16]) {
									var obj2 = [elm21[0].style];
									var prop2 = [name16];
									var val2 = [cur11[0]];
									var fn2 = [(function(val3,prop3,obj3) {
										return function(i25) {
											obj3[0][prop3[0]] = val3[0];
										};
									})(val2,prop2,obj2)];
									window.requestAnimationFrame((function(fn3) {
										return function(i26) {
											window.requestAnimationFrame(fn3[0]);
										};
									})(fn2));
								}
							}
						} else if(name15[0] != "remove" && cur11[0] != oldStyle1[name15[0]]) {
							window.requestAnimationFrame((function(name17,elm22,cur12) {
								return function(i27) {
									elm22[0].style[name17[0]] = cur12[0];
								};
							})(name15,elm21,cur11));
						}
					}
				}
				var name18;
				var cur13;
				var old5;
				var elm23 = vnode1.elm;
				var oldOn1 = oldVnode1.data.on == null?{ }:oldVnode1.data.on;
				var on1 = vnode1.data.on == null?{ }:vnode1.data.on;
				if(on1 != { }) {
					var _g23 = 0;
					var _g111 = Object.keys(on1);
					while(_g23 < _g111.length) {
						var name19 = _g111[_g23];
						++_g23;
						cur13 = on1[name19];
						old5 = oldOn1[name19];
						if(old5 == null) {
							console.log(cur13);
							on1[name19] = cur13;
							elm23.addEventListener(name19,cur13);
						} else {
							on1[name19] = cur13;
						}
					}
				}
				if(vnode1.data != null) {
					i17 = vnode1.data.hook;
					if(i17 != undefined) {
						if(i17.create) {
							i17.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
						}
						if(i17.insert) {
							insertedVnodeQueue.push(vnode1);
						}
					}
				}
			} else {
				var this14 = window.document.createTextNode(vnode1.text);
				elm12 = vnode1.elm = this14;
			}
			new_node7 = vnode1.elm;
			parentElm.insertBefore(new_node7,before);
			++startIdx;
		}
	} else if(newStartIdx > newEndIdx) {
		var startIdx1 = oldStartIdx;
		var y;
		y = 0;
		while(startIdx1 <= oldEndIdx) {
			var i28;
			var listeners;
			var rm = null;
			var ch = oldCh[startIdx1];
			if(ch != undefined) {
				if(ch.sel != undefined) {
					var vnode2 = ch;
					var i29 = vnode2.data;
					var j;
					if(i29 != undefined) {
						var tmp6;
						i29 = i29.hook;
						if(i29 != undefined) {
							i29 = i29.destroy;
							tmp6 = i29 != undefined;
						} else {
							tmp6 = false;
						}
						if(tmp6) {
							i29(vnode2);
						}
						var style2 = null;
						var name20;
						var elm24 = vnode2.elm;
						var s = vnode2.data.style;
						if(s != null) {
							style2 = s.destroy;
							if(style2 != null) {
								var _g24 = 0;
								var _g112 = Object.keys(style2);
								while(_g24 < _g112.length) {
									var name21 = _g112[_g24];
									++_g24;
									elm24.style[name21] = style2[name21];
								}
							}
						}
						i29 = vnode2.children;
						if(i29 != undefined) {
							j = 0;
							while(j < vnode2.children.length) {
								snabbdom_engine_dom_PatchDom.invokeDestroyHook(vnode2.children[j]);
								++j;
							}
						}
					}
					var vnode3 = ch;
					var rm1 = [rm];
					var s1 = vnode3.data.style;
					if(!s1 || !s1.remove) {
						if(rm1[0] != null) {
							rm1[0]();
						}
					} else {
						var name22;
						var elm25 = [vnode3.elm];
						var idx;
						var i30 = 0;
						var maxDur = 0;
						var compStyle;
						var style3 = s1.remove;
						var amount = [0];
						var applied = [];
						var _g25 = 0;
						var _g113 = Object.keys(style3);
						while(_g25 < _g113.length) {
							var name23 = _g113[_g25];
							++_g25;
							applied.push(name23);
							elm25[0].style[name23] = style3[name23];
						}
						compStyle = window.getComputedStyle(elm25[0]);
						var props2 = compStyle["transition-property"].split(", ");
						var i31;
						i31 = 0;
						while(i31 < props2.length) {
							if(applied.indexOf(props2[i31]) != -1) {
								amount[0]++;
							}
							++i31;
						}
						var tmp7 = (function(amount1,elm26,rm2) {
							return function(ev) {
								if(ev.target == elm26[0]) {
									--amount1[0];
								}
								if(amount1[0] == 0) {
									rm2[0]();
								}
							};
						})(amount,elm25,rm1);
						elm25[0].addEventListener("transitionend",tmp7);
					}
					var tmp8;
					var tmp9;
					i28 = ch.data;
					if(i28 != undefined) {
						i28 = i28.hook;
						tmp9 = i28 != undefined;
					} else {
						tmp9 = false;
					}
					if(tmp9) {
						i28 = i28.remove;
						tmp8 = i28 != undefined;
					} else {
						tmp8 = false;
					}
					if(tmp8) {
						i28(ch,rm);
					} else {
						console.log("remove");
						if(rm != null) {
							rm();
						}
						var this15 = [parentElm];
						var element6 = [ch.elm];
						window.requestAnimationFrame((function(element7,this16) {
							return function(i32) {
								this16[0].removeChild(element7[0]);
							};
						})(element6,this15));
					}
				} else {
					var this17 = [parentElm];
					var element8 = [ch.elm];
					window.requestAnimationFrame((function(element9,this18) {
						return function(i33) {
							this18[0].removeChild(element9[0]);
						};
					})(element8,this17));
				}
			}
			++startIdx1;
		}
	}
};
snabbdom_engine_dom_PatchDom.patchVnode = function(oldVnode,vnode,insertedVnodeQueue) {
	var i;
	var hook;
	var tmp;
	var tmp1;
	i = vnode.data;
	if(i != undefined) {
		hook = i.hook;
		tmp1 = hook != undefined;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		i = hook.prepatch;
		tmp = i != undefined;
	} else {
		tmp = false;
	}
	if(tmp) {
		i(oldVnode,vnode);
	}
	var tmp2;
	i = oldVnode.data;
	if(i != undefined) {
		i = i.vnode;
		tmp2 = i != undefined;
	} else {
		tmp2 = false;
	}
	if(tmp2) {
		oldVnode = i;
	}
	var tmp3;
	i = vnode.data;
	if(i != undefined) {
		i = i.vnode;
		tmp3 = i != undefined;
	} else {
		tmp3 = false;
	}
	if(tmp3) {
		vnode = i;
	}
	var elm = vnode.elm = oldVnode.elm;
	var oldCh = oldVnode.children;
	var ch = vnode.children;
	if(oldVnode == vnode) {
		return;
	}
	if(vnode.data != undefined) {
		var key;
		var cur;
		var old;
		var elm1 = vnode.elm;
		var oldAttrs = oldVnode.data.attrs == null?{ }:oldVnode.data.attrs;
		var attrs = vnode.data.attrs == null?{ }:vnode.data.attrs;
		var apply_attributes;
		if(vnode.data.skip_attributes == false) {
			apply_attributes = true;
		} else if(elm1.cached_attributes == null) {
			elm1.cached_attributes = true;
			apply_attributes = true;
		} else if(elm1.cached_attributes == true) {
			apply_attributes = false;
		} else {
			apply_attributes = true;
		}
		if(apply_attributes) {
			var _g = 0;
			var _g1 = Object.keys(attrs);
			while(_g < _g1.length) {
				var key1 = [_g1[_g]];
				++_g;
				cur = attrs[key1[0]];
				old = oldAttrs[key1[0]];
				if(old != cur) {
					if(!cur && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key1[0]]) {
						window.requestAnimationFrame((function(key2) {
							return function(i1) {
								elm1.removeAttribute(key2[0]);
							};
						})(key1));
					} else {
						window.requestAnimationFrame((function(key3) {
							return function(i2) {
								elm1.setAttribute(key3[0],cur);
							};
						})(key1));
					}
				}
			}
			var _g2 = 0;
			var _g11 = Object.keys(oldAttrs);
			while(_g2 < _g11.length) {
				var key4 = [_g11[_g2]];
				++_g2;
				if(!Object.prototype.hasOwnProperty.call(attrs,key4[0])) {
					window.requestAnimationFrame((function(key5) {
						return function(i3) {
							elm1.removeAttribute(key5[0]);
						};
					})(key4));
				}
			}
		}
		var key6;
		var cur1;
		var old1;
		var elm2 = vnode.elm;
		var oldProps = oldVnode.data.props == null?{ }:oldVnode.data.props;
		var props = vnode.data.props == null?{ }:vnode.data.props;
		var _g3 = 0;
		var _g12 = Object.keys(props);
		while(_g3 < _g12.length) {
			var key7 = _g12[_g3];
			++_g3;
			cur1 = props[key7];
			old1 = oldProps[key7];
			if(old1 != cur1) {
				elm2[key7] = cur1;
			}
		}
		var cur2;
		var name;
		var elm3 = vnode.elm;
		var oldClass = oldVnode.data.classes == null?{ }:oldVnode.data.classes;
		var klass = vnode.data.classes == null?{ }:vnode.data.classes;
		if(vnode.data.skip_attributes == false) {
			var _g4 = 0;
			var _g13 = Object.keys(klass);
			while(_g4 < _g13.length) {
				var name1 = [_g13[_g4]];
				++_g4;
				cur2 = klass[name1[0]];
				if(cur2 != oldClass[name1[0]]) {
					if(cur2 == "add") {
						window.requestAnimationFrame((function(name2) {
							return function(i4) {
								elm3.classList.add(name2[0]);
							};
						})(name1));
					} else if(cur2 == "remove") {
						window.requestAnimationFrame((function(name3) {
							return function(i5) {
								elm3.classList.remove(name3[0]);
							};
						})(name1));
					}
				}
			}
		}
		var cur3;
		var name4;
		var elm4 = vnode.elm;
		var apply_styles;
		if(vnode.data.skip_styles == false) {
			apply_styles = true;
		} else if(elm4.cached_styles == null) {
			elm4.cached_styles = true;
			apply_styles = true;
		} else if(elm4.cached_styles == true) {
			apply_styles = false;
		} else {
			apply_styles = true;
		}
		if(apply_styles) {
			console.log(vnode);
			var oldStyle = oldVnode.data.style == null?{ }:oldVnode.data.style;
			var style = vnode.data.style == null?{ }:vnode.data.style;
			var oldHasDel = Object.prototype.hasOwnProperty.call(oldStyle,"delayed");
			var _g5 = 0;
			var _g14 = Object.keys(style);
			while(_g5 < _g14.length) {
				var name5 = [_g14[_g5]];
				++_g5;
				cur3 = style[name5[0]];
				if(name5[0] == "delayed") {
					var delayed = style.delayed;
					var oldDelayed = oldStyle.delayed;
					var _g21 = 0;
					var _g31 = Object.keys(delayed);
					while(_g21 < _g31.length) {
						var name6 = _g31[_g21];
						++_g21;
						cur3 = delayed[name6];
						if(!oldHasDel || cur3 != oldDelayed[name6]) {
							var obj = [elm4.style];
							var fn = [(function(val,prop,obj1) {
								return function(i6) {
									obj1[0][prop[0]] = val[0];
								};
							})([cur3],[name6],obj)];
							window.requestAnimationFrame((function(fn1) {
								return function(i7) {
									window.requestAnimationFrame(fn1[0]);
								};
							})(fn));
						}
					}
				} else if(name5[0] != "remove" && cur3 != oldStyle[name5[0]]) {
					window.requestAnimationFrame((function(name7) {
						return function(i8) {
							elm4.style[name7[0]] = cur3;
						};
					})(name5));
				}
			}
		}
		var name8;
		var cur4;
		var old2;
		var elm5 = vnode.elm;
		var oldOn = oldVnode.data.on == null?{ }:oldVnode.data.on;
		var on = vnode.data.on == null?{ }:vnode.data.on;
		if(on != { }) {
			var _g6 = 0;
			var _g15 = Object.keys(on);
			while(_g6 < _g15.length) {
				var name9 = _g15[_g6];
				++_g6;
				cur4 = on[name9];
				old2 = oldOn[name9];
				if(old2 == null) {
					console.log(cur4);
					on[name9] = cur4;
					elm5.addEventListener(name9,cur4);
				} else {
					on[name9] = cur4;
				}
			}
		}
		i = vnode.data.hook;
		var tmp4;
		if(i != undefined) {
			i = i.update;
			tmp4 = i != undefined;
		} else {
			tmp4 = false;
		}
		if(tmp4) {
			i(oldVnode,vnode);
		}
	}
	if(vnode.text == undefined) {
		if(oldCh != undefined && ch != undefined) {
			if(oldCh != ch) {
				snabbdom_engine_dom_PatchDom.updateChildren(elm,oldCh,ch,insertedVnodeQueue);
			}
		} else if(ch != undefined) {
			var startIdx = 0;
			var endIdx = ch.length - 1;
			var i9;
			var new_node;
			i9 = 0;
			while(startIdx <= endIdx) {
				var vnode1 = ch[startIdx];
				var i10;
				var data = vnode1.data;
				if(data != undefined) {
					var tmp5;
					i10 = data.hook;
					if(i10 != undefined) {
						i10 = i10.init;
						tmp5 = i10 != undefined;
					} else {
						tmp5 = false;
					}
					if(tmp5) {
						i10(vnode1);
					}
					i10 = data.vnode;
					if(i10 != undefined) {
						vnode1 = i10;
					}
				}
				var elm6;
				var children = vnode1.children;
				var sel = vnode1.sel;
				if(sel != undefined) {
					var hashIdx = sel.indexOf("#",0);
					var dotIdx = sel.indexOf(".",hashIdx);
					var hash = hashIdx > 0?hashIdx:sel.length;
					var dot = dotIdx > 0?dotIdx:sel.length;
					var tag = hashIdx != -1 || dotIdx != -1?sel.slice(0,Math.min(hash,dot)):sel;
					var tmp6;
					var tmp7;
					if(data != undefined) {
						i10 = data.ns;
						tmp7 = i10 != undefined;
					} else {
						tmp7 = false;
					}
					if(tmp7) {
						tmp6 = window.document.createElementNS(i10,tag);
					} else {
						tmp6 = window.document.createElement(tag);
					}
					elm6 = vnode1.elm = tmp6;
					if(hash < dot) {
						elm6.id = sel.slice(hash + 1,dot);
					}
					if(Array.isArray(children)) {
						i10 = 0;
						while(i10 < children.length) {
							var new_node1 = snabbdom_engine_dom_PatchDom.createElm(children[i10],insertedVnodeQueue);
							window.requestAnimationFrame((function(element,this1) {
								return function(i11) {
									this1[0].appendChild(element[0]);
								};
							})([new_node1],[elm6]));
							++i10;
						}
					} else if(typeof vnode1.text == "string" || typeof vnode1.text == "number") {
						var this2 = [elm6];
						var element1 = [window.document.createTextNode(vnode1.text)];
						window.requestAnimationFrame((function(element2,this3) {
							return function(i12) {
								this3[0].appendChild(element2[0]);
							};
						})(element1,this2));
					}
					var oldVnode1 = snabbdom_engine_dom_PatchDom.emptyNode;
					var key8;
					var cur5 = [];
					var old3;
					var elm7 = [vnode1.elm];
					var oldAttrs1 = oldVnode1.data.attrs == null?{ }:oldVnode1.data.attrs;
					var attrs1 = vnode1.data.attrs == null?{ }:vnode1.data.attrs;
					var apply_attributes1;
					if(vnode1.data.skip_attributes == false) {
						apply_attributes1 = true;
					} else if(elm7[0].cached_attributes == null) {
						elm7[0].cached_attributes = true;
						apply_attributes1 = true;
					} else if(elm7[0].cached_attributes == true) {
						apply_attributes1 = false;
					} else {
						apply_attributes1 = true;
					}
					if(apply_attributes1) {
						var _g7 = 0;
						var _g16 = Object.keys(attrs1);
						while(_g7 < _g16.length) {
							var key9 = [_g16[_g7]];
							++_g7;
							cur5[0] = attrs1[key9[0]];
							old3 = oldAttrs1[key9[0]];
							if(old3 != cur5[0]) {
								if(!cur5[0] && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key9[0]]) {
									window.requestAnimationFrame((function(key10,elm8) {
										return function(i13) {
											elm8[0].removeAttribute(key10[0]);
										};
									})(key9,elm7));
								} else {
									window.requestAnimationFrame((function(key11,elm9,cur6) {
										return function(i14) {
											elm9[0].setAttribute(key11[0],cur6[0]);
										};
									})(key9,elm7,cur5));
								}
							}
						}
						var _g8 = 0;
						var _g17 = Object.keys(oldAttrs1);
						while(_g8 < _g17.length) {
							var key12 = [_g17[_g8]];
							++_g8;
							if(!Object.prototype.hasOwnProperty.call(attrs1,key12[0])) {
								window.requestAnimationFrame((function(key13,elm10) {
									return function(i15) {
										elm10[0].removeAttribute(key13[0]);
									};
								})(key12,elm7));
							}
						}
					}
					var key14;
					var cur7;
					var old4;
					var elm11 = vnode1.elm;
					var oldProps1 = oldVnode1.data.props == null?{ }:oldVnode1.data.props;
					var props1 = vnode1.data.props == null?{ }:vnode1.data.props;
					var _g9 = 0;
					var _g18 = Object.keys(props1);
					while(_g9 < _g18.length) {
						var key15 = _g18[_g9];
						++_g9;
						cur7 = props1[key15];
						old4 = oldProps1[key15];
						if(old4 != cur7) {
							elm11[key15] = cur7;
						}
					}
					var cur8;
					var name10;
					var elm12 = [vnode1.elm];
					var oldClass1 = oldVnode1.data.classes == null?{ }:oldVnode1.data.classes;
					var klass1 = vnode1.data.classes == null?{ }:vnode1.data.classes;
					if(vnode1.data.skip_attributes == false) {
						var _g10 = 0;
						var _g19 = Object.keys(klass1);
						while(_g10 < _g19.length) {
							var name11 = [_g19[_g10]];
							++_g10;
							cur8 = klass1[name11[0]];
							if(cur8 != oldClass1[name11[0]]) {
								if(cur8 == "add") {
									window.requestAnimationFrame((function(name12,elm13) {
										return function(i16) {
											elm13[0].classList.add(name12[0]);
										};
									})(name11,elm12));
								} else if(cur8 == "remove") {
									window.requestAnimationFrame((function(name13,elm14) {
										return function(i17) {
											elm14[0].classList.remove(name13[0]);
										};
									})(name11,elm12));
								}
							}
						}
					}
					var cur9 = [];
					var name14;
					var elm15 = [vnode1.elm];
					var apply_styles1;
					if(vnode1.data.skip_styles == false) {
						apply_styles1 = true;
					} else if(elm15[0].cached_styles == null) {
						elm15[0].cached_styles = true;
						apply_styles1 = true;
					} else if(elm15[0].cached_styles == true) {
						apply_styles1 = false;
					} else {
						apply_styles1 = true;
					}
					if(apply_styles1) {
						console.log(vnode1);
						var oldStyle1 = oldVnode1.data.style == null?{ }:oldVnode1.data.style;
						var style1 = vnode1.data.style == null?{ }:vnode1.data.style;
						var oldHasDel1 = Object.prototype.hasOwnProperty.call(oldStyle1,"delayed");
						var _g20 = 0;
						var _g110 = Object.keys(style1);
						while(_g20 < _g110.length) {
							var name15 = [_g110[_g20]];
							++_g20;
							cur9[0] = style1[name15[0]];
							if(name15[0] == "delayed") {
								var delayed1 = style1.delayed;
								var oldDelayed1 = oldStyle1.delayed;
								var _g22 = 0;
								var _g32 = Object.keys(delayed1);
								while(_g22 < _g32.length) {
									var name16 = _g32[_g22];
									++_g22;
									cur9[0] = delayed1[name16];
									if(!oldHasDel1 || cur9[0] != oldDelayed1[name16]) {
										var obj2 = [elm15[0].style];
										var prop1 = [name16];
										var val1 = [cur9[0]];
										var fn2 = [(function(val2,prop2,obj3) {
											return function(i18) {
												obj3[0][prop2[0]] = val2[0];
											};
										})(val1,prop1,obj2)];
										window.requestAnimationFrame((function(fn3) {
											return function(i19) {
												window.requestAnimationFrame(fn3[0]);
											};
										})(fn2));
									}
								}
							} else if(name15[0] != "remove" && cur9[0] != oldStyle1[name15[0]]) {
								window.requestAnimationFrame((function(name17,elm16,cur10) {
									return function(i20) {
										elm16[0].style[name17[0]] = cur10[0];
									};
								})(name15,elm15,cur9));
							}
						}
					}
					var name18;
					var cur11;
					var old5;
					var elm17 = vnode1.elm;
					var oldOn1 = oldVnode1.data.on == null?{ }:oldVnode1.data.on;
					var on1 = vnode1.data.on == null?{ }:vnode1.data.on;
					if(on1 != { }) {
						var _g23 = 0;
						var _g111 = Object.keys(on1);
						while(_g23 < _g111.length) {
							var name19 = _g111[_g23];
							++_g23;
							cur11 = on1[name19];
							old5 = oldOn1[name19];
							if(old5 == null) {
								console.log(cur11);
								on1[name19] = cur11;
								elm17.addEventListener(name19,cur11);
							} else {
								on1[name19] = cur11;
							}
						}
					}
					if(vnode1.data != null) {
						i10 = vnode1.data.hook;
						if(i10 != undefined) {
							if(i10.create) {
								i10.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
							}
							if(i10.insert) {
								insertedVnodeQueue.push(vnode1);
							}
						}
					}
				} else {
					var this4 = window.document.createTextNode(vnode1.text);
					elm6 = vnode1.elm = this4;
				}
				new_node = vnode1.elm;
				elm.insertBefore(new_node,null);
				++startIdx;
			}
		} else if(oldCh != undefined) {
			var startIdx1 = 0;
			var endIdx1 = oldCh.length - 1;
			var y;
			y = 0;
			while(startIdx1 <= endIdx1) {
				var i21;
				var listeners;
				var rm = null;
				var ch1 = oldCh[startIdx1];
				if(ch1 != undefined) {
					if(ch1.sel != undefined) {
						var vnode2 = ch1;
						var i22 = vnode2.data;
						var j;
						if(i22 != undefined) {
							var tmp8;
							i22 = i22.hook;
							if(i22 != undefined) {
								i22 = i22.destroy;
								tmp8 = i22 != undefined;
							} else {
								tmp8 = false;
							}
							if(tmp8) {
								i22(vnode2);
							}
							var style2 = null;
							var name20;
							var elm18 = vnode2.elm;
							var s = vnode2.data.style;
							if(s != null) {
								style2 = s.destroy;
								if(style2 != null) {
									var _g24 = 0;
									var _g112 = Object.keys(style2);
									while(_g24 < _g112.length) {
										var name21 = _g112[_g24];
										++_g24;
										elm18.style[name21] = style2[name21];
									}
								}
							}
							i22 = vnode2.children;
							if(i22 != undefined) {
								j = 0;
								while(j < vnode2.children.length) {
									snabbdom_engine_dom_PatchDom.invokeDestroyHook(vnode2.children[j]);
									++j;
								}
							}
						}
						var vnode3 = ch1;
						var rm1 = [rm];
						var s1 = vnode3.data.style;
						if(!s1 || !s1.remove) {
							if(rm1[0] != null) {
								rm1[0]();
							}
						} else {
							var name22;
							var elm19 = [vnode3.elm];
							var idx;
							var i23 = 0;
							var maxDur = 0;
							var compStyle;
							var style3 = s1.remove;
							var amount = [0];
							var applied = [];
							var _g25 = 0;
							var _g113 = Object.keys(style3);
							while(_g25 < _g113.length) {
								var name23 = _g113[_g25];
								++_g25;
								applied.push(name23);
								elm19[0].style[name23] = style3[name23];
							}
							compStyle = window.getComputedStyle(elm19[0]);
							var props2 = compStyle["transition-property"].split(", ");
							var i24;
							i24 = 0;
							while(i24 < props2.length) {
								if(applied.indexOf(props2[i24]) != -1) {
									amount[0]++;
								}
								++i24;
							}
							var tmp9 = (function(amount1,elm20,rm2) {
								return function(ev) {
									if(ev.target == elm20[0]) {
										--amount1[0];
									}
									if(amount1[0] == 0) {
										rm2[0]();
									}
								};
							})(amount,elm19,rm1);
							elm19[0].addEventListener("transitionend",tmp9);
						}
						var tmp10;
						var tmp11;
						i21 = ch1.data;
						if(i21 != undefined) {
							i21 = i21.hook;
							tmp11 = i21 != undefined;
						} else {
							tmp11 = false;
						}
						if(tmp11) {
							i21 = i21.remove;
							tmp10 = i21 != undefined;
						} else {
							tmp10 = false;
						}
						if(tmp10) {
							i21(ch1,rm);
						} else {
							console.log("remove");
							if(rm != null) {
								rm();
							}
							var this5 = [elm];
							var element3 = [ch1.elm];
							window.requestAnimationFrame((function(element4,this6) {
								return function(i25) {
									this6[0].removeChild(element4[0]);
								};
							})(element3,this5));
						}
					} else {
						var this7 = [elm];
						var element5 = [ch1.elm];
						window.requestAnimationFrame((function(element6,this8) {
							return function(i26) {
								this8[0].removeChild(element6[0]);
							};
						})(element5,this7));
					}
				}
				++startIdx1;
			}
		}
	} else if(oldVnode.text != vnode.text) {
		var this9 = elm;
		var value = vnode.text;
		window.requestAnimationFrame(function(i27) {
			this9.textContent = value;
		});
	}
	var tmp12;
	if(hook != undefined) {
		i = hook.postpatch;
		tmp12 = i != undefined;
	} else {
		tmp12 = false;
	}
	if(tmp12) {
		i(oldVnode,vnode);
	}
};
snabbdom_engine_dom_PatchDom.patchDom = function(oldVnode,vnode) {
	var i;
	var insertedVnodeQueue = [];
	var this1 = oldVnode.parentElement;
	if(this1 != null) {
		var vnode1 = vnode;
		var i1;
		var data = vnode1.data;
		if(data != undefined) {
			var tmp;
			i1 = data.hook;
			if(i1 != undefined) {
				i1 = i1.init;
				tmp = i1 != undefined;
			} else {
				tmp = false;
			}
			if(tmp) {
				i1(vnode1);
			}
			i1 = data.vnode;
			if(i1 != undefined) {
				vnode1 = i1;
			}
		}
		var elm;
		var children = vnode1.children;
		var sel = vnode1.sel;
		if(sel != undefined) {
			var hashIdx = sel.indexOf("#",0);
			var dotIdx = sel.indexOf(".",hashIdx);
			var hash = hashIdx > 0?hashIdx:sel.length;
			var dot = dotIdx > 0?dotIdx:sel.length;
			var tag = hashIdx != -1 || dotIdx != -1?sel.slice(0,Math.min(hash,dot)):sel;
			var tmp1;
			var tmp2;
			if(data != undefined) {
				i1 = data.ns;
				tmp2 = i1 != undefined;
			} else {
				tmp2 = false;
			}
			if(tmp2) {
				tmp1 = window.document.createElementNS(i1,tag);
			} else {
				tmp1 = window.document.createElement(tag);
			}
			elm = vnode1.elm = tmp1;
			if(hash < dot) {
				elm.id = sel.slice(hash + 1,dot);
			}
			if(Array.isArray(children)) {
				i1 = 0;
				while(i1 < children.length) {
					var new_node = snabbdom_engine_dom_PatchDom.createElm(children[i1],insertedVnodeQueue);
					window.requestAnimationFrame((function(element,this2) {
						return function(i2) {
							this2[0].appendChild(element[0]);
						};
					})([new_node],[elm]));
					++i1;
				}
			} else if(typeof vnode1.text == "string" || typeof vnode1.text == "number") {
				var this3 = elm;
				var element1 = window.document.createTextNode(vnode1.text);
				window.requestAnimationFrame(function(i3) {
					this3.appendChild(element1);
				});
			}
			var oldVnode1 = snabbdom_engine_dom_PatchDom.emptyNode;
			var key;
			var cur;
			var old;
			var elm1 = vnode1.elm;
			var oldAttrs = oldVnode1.data.attrs == null?{ }:oldVnode1.data.attrs;
			var attrs = vnode1.data.attrs == null?{ }:vnode1.data.attrs;
			var apply_attributes;
			if(vnode1.data.skip_attributes == false) {
				apply_attributes = true;
			} else if(elm1.cached_attributes == null) {
				elm1.cached_attributes = true;
				apply_attributes = true;
			} else if(elm1.cached_attributes == true) {
				apply_attributes = false;
			} else {
				apply_attributes = true;
			}
			if(apply_attributes) {
				var _g = 0;
				var _g1 = Object.keys(attrs);
				while(_g < _g1.length) {
					var key1 = [_g1[_g]];
					++_g;
					cur = attrs[key1[0]];
					old = oldAttrs[key1[0]];
					if(old != cur) {
						if(!cur && snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict[key1[0]]) {
							window.requestAnimationFrame((function(key2) {
								return function(i4) {
									elm1.removeAttribute(key2[0]);
								};
							})(key1));
						} else {
							window.requestAnimationFrame((function(key3) {
								return function(i5) {
									elm1.setAttribute(key3[0],cur);
								};
							})(key1));
						}
					}
				}
				var _g2 = 0;
				var _g11 = Object.keys(oldAttrs);
				while(_g2 < _g11.length) {
					var key4 = [_g11[_g2]];
					++_g2;
					if(!Object.prototype.hasOwnProperty.call(attrs,key4[0])) {
						window.requestAnimationFrame((function(key5) {
							return function(i6) {
								elm1.removeAttribute(key5[0]);
							};
						})(key4));
					}
				}
			}
			var key6;
			var cur1;
			var old1;
			var elm2 = vnode1.elm;
			var oldProps = oldVnode1.data.props == null?{ }:oldVnode1.data.props;
			var props = vnode1.data.props == null?{ }:vnode1.data.props;
			var _g3 = 0;
			var _g12 = Object.keys(props);
			while(_g3 < _g12.length) {
				var key7 = _g12[_g3];
				++_g3;
				cur1 = props[key7];
				old1 = oldProps[key7];
				if(old1 != cur1) {
					elm2[key7] = cur1;
				}
			}
			var cur2;
			var name;
			var elm3 = vnode1.elm;
			var oldClass = oldVnode1.data.classes == null?{ }:oldVnode1.data.classes;
			var klass = vnode1.data.classes == null?{ }:vnode1.data.classes;
			if(vnode1.data.skip_attributes == false) {
				var _g4 = 0;
				var _g13 = Object.keys(klass);
				while(_g4 < _g13.length) {
					var name1 = [_g13[_g4]];
					++_g4;
					cur2 = klass[name1[0]];
					if(cur2 != oldClass[name1[0]]) {
						if(cur2 == "add") {
							window.requestAnimationFrame((function(name2) {
								return function(i7) {
									elm3.classList.add(name2[0]);
								};
							})(name1));
						} else if(cur2 == "remove") {
							window.requestAnimationFrame((function(name3) {
								return function(i8) {
									elm3.classList.remove(name3[0]);
								};
							})(name1));
						}
					}
				}
			}
			var cur3;
			var name4;
			var elm4 = vnode1.elm;
			var apply_styles;
			if(vnode1.data.skip_styles == false) {
				apply_styles = true;
			} else if(elm4.cached_styles == null) {
				elm4.cached_styles = true;
				apply_styles = true;
			} else if(elm4.cached_styles == true) {
				apply_styles = false;
			} else {
				apply_styles = true;
			}
			if(apply_styles) {
				console.log(vnode1);
				var oldStyle = oldVnode1.data.style == null?{ }:oldVnode1.data.style;
				var style = vnode1.data.style == null?{ }:vnode1.data.style;
				var oldHasDel = Object.prototype.hasOwnProperty.call(oldStyle,"delayed");
				var _g5 = 0;
				var _g14 = Object.keys(style);
				while(_g5 < _g14.length) {
					var name5 = [_g14[_g5]];
					++_g5;
					cur3 = style[name5[0]];
					if(name5[0] == "delayed") {
						var delayed = style.delayed;
						var oldDelayed = oldStyle.delayed;
						var _g21 = 0;
						var _g31 = Object.keys(delayed);
						while(_g21 < _g31.length) {
							var name6 = _g31[_g21];
							++_g21;
							cur3 = delayed[name6];
							if(!oldHasDel || cur3 != oldDelayed[name6]) {
								var obj = [elm4.style];
								var fn = [(function(val,prop,obj1) {
									return function(i9) {
										obj1[0][prop[0]] = val[0];
									};
								})([cur3],[name6],obj)];
								window.requestAnimationFrame((function(fn1) {
									return function(i10) {
										window.requestAnimationFrame(fn1[0]);
									};
								})(fn));
							}
						}
					} else if(name5[0] != "remove" && cur3 != oldStyle[name5[0]]) {
						window.requestAnimationFrame((function(name7) {
							return function(i11) {
								elm4.style[name7[0]] = cur3;
							};
						})(name5));
					}
				}
			}
			var name8;
			var cur4;
			var old2;
			var elm5 = vnode1.elm;
			var oldOn = oldVnode1.data.on == null?{ }:oldVnode1.data.on;
			var on = vnode1.data.on == null?{ }:vnode1.data.on;
			if(on != { }) {
				var _g6 = 0;
				var _g15 = Object.keys(on);
				while(_g6 < _g15.length) {
					var name9 = _g15[_g6];
					++_g6;
					cur4 = on[name9];
					old2 = oldOn[name9];
					if(old2 == null) {
						console.log(cur4);
						on[name9] = cur4;
						elm5.addEventListener(name9,cur4);
					} else {
						on[name9] = cur4;
					}
				}
			}
			if(vnode1.data != null) {
				i1 = vnode1.data.hook;
				if(i1 != undefined) {
					if(i1.create) {
						i1.create(snabbdom_engine_dom_PatchDom.emptyNode,vnode1);
					}
					if(i1.insert) {
						insertedVnodeQueue.push(vnode1);
					}
				}
			}
		} else {
			var this4 = window.document.createTextNode(vnode1.text);
			elm = vnode1.elm = this4;
		}
		var this5 = oldVnode.parentElement;
		var this6 = this5;
		var e1 = vnode.elm;
		var e2 = oldVnode;
		window.requestAnimationFrame(function(i12) {
			this6.replaceChild(e1,e2);
		});
	} else {
		var data1 = { };
		var key8 = data1 == null?null:data1.key;
		oldVnode = { sel : oldVnode.tagName, data : data1, children : [], text : null, elm : oldVnode, key : key8};
		snabbdom_engine_dom_PatchDom.patchVnode(oldVnode,vnode,insertedVnodeQueue);
	}
	i = 0;
	while(i < insertedVnodeQueue.length) {
		insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
		++i;
	}
	return vnode;
};
snabbdom_engine_dom_PatchDom.patch = function(oldVnode,vnode) {
	var i;
	var insertedVnodeQueue = [];
	snabbdom_engine_dom_PatchDom.patchVnode(oldVnode,vnode,insertedVnodeQueue);
	i = 0;
	while(i < insertedVnodeQueue.length) {
		insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);
		++i;
	}
	return vnode;
};
var snabbdom_engine_dom_plugins_Attributes = function() { };
snabbdom_engine_dom_plugins_Attributes.__name__ = true;
var thx_Arrays = function() { };
thx_Arrays.__name__ = true;
thx_Arrays.shuffle = function(a) {
	var t = thx_Ints.range(a.length);
	var array = [];
	while(t.length > 0) {
		var pos = Std.random(t.length);
		var index = t[pos];
		t.splice(pos,1);
		array.push(a[index]);
	}
	return array;
};
var thx_Either = { __ename__ : true, __constructs__ : ["Left","Right"] };
thx_Either.Left = function(value) { var $x = ["Left",0,value]; $x.__enum__ = thx_Either; return $x; };
thx_Either.Right = function(value) { var $x = ["Right",1,value]; $x.__enum__ = thx_Either; return $x; };
var thx_Ints = function() { };
thx_Ints.__name__ = true;
thx_Ints.range = function(start,stop,step) {
	if(step == null) {
		step = 1;
	}
	if(null == stop) {
		stop = start;
		start = 0;
	}
	if((stop - start) / step == Infinity) {
		throw new js__$Boot_HaxeError("infinite range");
	}
	var range = [];
	var i = -1;
	var j;
	if(step < 0) {
		while(true) {
			j = start + step * ++i;
			if(!(j > stop)) {
				break;
			}
			range.push(j);
		}
	} else {
		while(true) {
			j = start + step * ++i;
			if(!(j < stop)) {
				break;
			}
			range.push(j);
		}
	}
	return range;
};
String.__name__ = true;
Array.__name__ = true;
snabbdom_engine_dom_PatchDom.emptyNode = (function($this) {
	var $r;
	var data = { };
	$r = { sel : "", data : data, children : [], text : null, elm : null, key : data == null?null:data.key};
	return $r;
}(this));
snabbdom_engine_dom_plugins_Attributes.booleanAttrs = ["allowfullscreen","async","autofocus","autoplay","checked","compact","controls","declare","default","defaultchecked","defaultmuted","defaultselected","defer","disabled","draggable","enabled","formnovalidate","hidden","indeterminate","inert","ismap","itemscope","loop","multiple","muted","nohref","noresize","noshade","novalidate","nowrap","open","pauseonexit","readonly","required","reversed","scoped","seamless","selected","sortable","spellcheck","translate","truespeed","typemustmatch","visible"];
snabbdom_engine_dom_plugins_Attributes.booleanAttrsDict = (function($this) {
	var $r;
	var hash = { };
	var len = snabbdom_engine_dom_plugins_Attributes.booleanAttrs.length;
	var i = 0;
	{
		i = 0;
		while(i < len) {
			hash[snabbdom_engine_dom_plugins_Attributes.booleanAttrs[i]] = true;
			++i;
		}
	}
	$r = hash;
	return $r;
}(this));
snabbdom_Main.main();
})();
